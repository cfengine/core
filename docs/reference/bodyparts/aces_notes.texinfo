
POSIX ACL are available in CFEngine Community starting with
3.4.0. NTFS ACL are available with CFEngine Nova or above.  Form of
the permissions is:

@cartouche
@smallexample
      aces => @{
              "@var{user:uid:mode[:perm_type]}", ..., 
              "@var{group:gid:mode[:perm_type]}", ..., 
              "@var{all:mode[:perm_type]}"
              @};
@end smallexample
@end cartouche

@itemize
@item @code{user} indicates that the line applies to a user specified
  by the user identitfier @code{uid}. @code{mode} is the permission
  mode string.

@item @code{group} indicates that the line applies to a group specified
  by the group identitfier @code{gid}. @code{mode} is the permission
  mode string.

@item @code{all} indicates that the line applies to every
  user. @code{mode} is the permission mode string.

@item @code{uid} is a valid user identifier for the system and
  cannot be empty. However, @code{uid} can be set to * as a synonym
  for the entity that owns the file system object (e.g. user:*:r).

@item @code{gid} is a valid group identifier for the system and
  cannot be empty. However, in some acl types, @code{gid} can be set
  to * to indicate a special group (e.g. in POSIX this refers to the
  file group).

@item @code{mode} is one or more strings
  @code{op}|@code{perms}|(@code{nperms}); a concatenation of @code{op},
  @code{perms} and optionally (@code{nperms}), see below, separated
  with commas (e.g. +rx,-w(s)). @code{mode} is parsed from left to
  right. 
@c TODO: include support for @code{fullaccess}, @code{noaccess},
@c and @code{remove}

@item @code{op} specifies the operation on any existing permissions,
  if the defined ACE already exists. @code{op} can be =, empty, + or
  -. = or empty sets the permissions to the ACE as stated, + adds and
  - removes the permissions from any existing ACE.
  @c TODO: what to do if + or - is used when ACE does not exist?

@item @code{nperms} (optional) specifies file system specific
  (native) permissions. Only valid if @code{acl_type} is
  defined. @code{nperms} will only be enforced if the file object is
  stored on a file system supporting the acl type set in
  @code{acl_type} (e.g. @code{nperms} will be ignored if
  @code{acl_type:}@code{ntfs} and the object is stored on a file system
  not supporting ntfs ACLs). Valid values for @code{nperms} varies with
  different ACL types, and is defined in subsequent sections.

@item @code{perm_type} (optional) can be set to either @code{allow} or
  @code{deny}, and defaults to @code{allow}. @code{deny} is only valid
  if @code{acl_type} is set to an ACL type that support deny
  permissions. A @code{deny} ACE will only be enforced if the file
  object is stored on a file system supporting the acl type set in
  @code{acl_type}.
@end itemize

@code{gperms} (generic permissions) is a concatenation of zero or more
of the characters shown in the table below. If left empty,
none of the permissions are set.
@c TODO: Should be allowed to set no permissions (empty perms?)


@multitable @columnfractions .05 .2 .30 .35
@headitem Flag @tab Description @tab Semantics on file @tab Semantics on directory

@item @code{r} @tab Read @tab Read data, permissions, attributes @tab Read
directory contents, permissions, attributes
@item @code{w} @tab Write @tab Write data @tab Create, delete, rename subobjects
@item @code{x} @tab Execute @tab Execute file @tab Access subobjects
@end multitable


Note that the @code{r} permission is not neccessary to read an object's
permissions and attributes in all file systems (e.g. in POSIX, having
@code{x} on its containing directory is sufficient).

