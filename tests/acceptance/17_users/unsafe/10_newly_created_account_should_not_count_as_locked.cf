bundle common test_meta
{
  vars:
      "description" string => "A user present gets locked";
      "story_id" string => "5525";
      "covers" string => "operational_repaired";
}

#######################################################
#
# Test that a newly created account does not confuse
# our locking detection. This may happen because
# "useradd" initially sets the password to '!'.
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub", "user_queries.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
}

#######################################################

bundle common hpux_trusted
{
  classes:
      "hpux_trusted_mode_test"
        expression => regcmp(".*hpux_trusted.*", $(this.promise_filename));
}

bundle agent init
{
  meta:
      "test_skip_unsupported" string => "hpux_trusted_mode_test.!hpux";

  # Delete user, then create.
  vars:
    "users[n1]" string => "johndoe";
    "users[n2]" string => "johndoe";
    "policies[n1]" string => "absent";
    "policies[n2]" string => "present";

    "iter" slist => { "n1", "n2" };

  users:
    "$(users[$(iter)])"
      policy => "$(policies[$(iter)])";
}

#######################################################

bundle agent test
{
  vars:
    "hash" string => "dTloMVpjYt1w2";

  users:
    "johndoe"
      policy => "locked",
      password => test_password;
}

body password test_password
{
  format => "hash";
  data => "$(test.hash)";
}

#######################################################

bundle agent check
{
  methods:
    "any" usebundle => user_is_locked("johndoe", "success", "failure"),
      classes => always("methods_run");

  classes:
      "ready" expression => "methods_run";
      "ok" and => { "success", "!failure" };

  reports:
    ok.ready::
      "$(this.promise_filename) Pass";
    !ok.ready::
      "$(this.promise_filename) FAIL";
}
