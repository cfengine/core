<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>

<overview>

<p>
Boolean type mismatch between function type and return value.
This can be the result of copy-pasted code, which should have been modified.
</p>

<p>
In C, most things we think of as boolean are actually int (0 or 1).
We prefer to use <code>bool</code> return type for functions which have 2 return values (<code>true</code> or <code>false</code>).
We consider some different things boolean:
</p>

<ul>
<li>
A variable with type <code>bool</code>
</li>
<li>
A function call with return type <code>bool</code>
</li>
<li>
A boolean macro - <code>true</code> or <code>false</code>
</li>
<li>
A comparison - <code>==</code> or <code>!=</code> (or less than / greater than variants).
</li>
<li>
A logical operation - AND or OR.
</li>
</ul>

<p>
The reason why this query was added was to catch cases like <a href="https://github.com/cfengine/core/pull/3635">a boolean function returning -1</a>.
<code>int</code> functions typically return <code>0</code> for success and <code>-1</code> for failure.
This means that if you copied the error handling of an int function to a <code>bool</code> function, it would return <code>true</code> (success) in case of error.
Error handling is the main reason to have this strict type checking for <code>bool</code>.
</p>

</overview>
<recommendation>

<p>
Change the returned value to something boolean, or change the function return type to <code>bool</code>.
Sometimes this means adding an an explicit comparison in the return statement.
(Typecasting is almost never the right answer).
</p>

</recommendation>
<example>

<sample src="bool-type-mismatch-return.c" />

</example>
<references>

<li>
CFEngine Contribution guidelines: <a href="https://github.com/cfengine/core/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a>
</li>

</references>
</qhelp>
