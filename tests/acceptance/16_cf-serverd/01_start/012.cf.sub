#######################################################
#
# Test cf-serverd related promises
#
# Tests copy_from encrypted digest verify (SMD5) zero-length file
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

#######################################################

body edit_defaults empty
{
empty_file_before_editing => "true";
edit_backup => "false";
}

body delete clean
{
rmdirs => "true";
}

bundle agent init
{
files:

  "$(G.testdir)/destination_file"
      delete => clean;

  "$(G.testdir)/source_file"
       create => "true",
edit_defaults => empty;
}

#######################################################

body classes if_repaired(x)
{
  promise_repaired => { "$(x)" };
}

bundle agent test
{
files:
  "$(G.testdir)/destination_file"
    copy_from => copy_src_file,
    classes => if_repaired("copy_ok");
}

#########################################################

body copy_from copy_src_file
{
source      => "$(G.testdir)/source_file";
servers     => { "127.0.0.1" };
copy_backup => "false";

portnumber => "9876"; # localhost_open

encrypt     => "true";
compare     => "digest";
verify      => "true";

#purge       => "false";
#type_check  => "true";
#force_ipv4  => "true";
trustkey => "true";
}

#######################################################

bundle agent check
{
classes:
  "dummy" expression => regextract("(.*)\.sub", $(this.promise_filename), "fn");

  "empty_ok" and => { strcmp(filesize("$(G.testdir)/destination_file"),"0") };


methods:
  copy_ok.empty_ok::
    "any" usebundle => default_check_diff("$(G.testdir)/source_file","$(G.testdir)/destination_file","$(fn[1])");

reports:
  !copy_ok|!empty_ok::
    "$(fn[1]) FAIL";
}
