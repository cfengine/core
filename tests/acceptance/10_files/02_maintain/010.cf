#######################################################
#
# Test that symlinks are set aside while copying trees of directorise (Issue 569)
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

bundle common g
{
vars:
        # This extracts the octal mode, and decimal nlink, uid, gid, size
        "type_command" string => 'use Fcntl; print Fcntl::S_ISDIR((lstat("$(G.testdir)/destdir"))[2]);';
}

#######################################################

bundle agent init
{
files:
    "$(G.testdir)/srcdir/";
    "$(G.testdir)/srcdir/foo"
      create => "true";
    "$(G.testdir)/realdestdir/"
      create => "true";
    "$(G.testdir)/destdir"
      comment => "Create a relative link to the target.",
      link_from => ln_s("$(G.testdir)/realdestdir");
}


body link_from ln_s(x) {
  link_type => "relative";
  source => "$(x)";
  when_no_source => "nop";
}

#######################################################

bundle agent test
{
files:
  "$(G.testdir)/destdir/"
    copy_from => sync_cp("$(G.testdir)/srcdir"),
    depth_search => recurse("inf"),
    move_obstructions => "true",
    action => if_elapsed(0);
}

body copy_from sync_cp(from)
{
source      => "$(from)";
purge       => "true";
preserve    => "true";
}

body depth_search recurse(d)

{
depth => "$(d)";
xdev  => "true";
}

body action if_elapsed(x)
{
ifelapsed => "$(x)";
expireafter => "$(x)";
}


#######################################################

bundle agent check
{
vars:
        "expect" string => "1";

        "result" string => execresult(
            "/usr/bin/perl -le '$(g.type_command)'", "noshell");
classes:
        "ok" expression => strcmp("$(expect)", "$(result)");

reports:
    DEBUG::
        "expected: '$(expect)'";
        "got:      '$(result)'";
    ok::
        "$(this.promise_filename) Pass";
    !ok::
        "$(this.promise_filename) FAIL";
}
