#######################################################
#
# Test GLOB_BRACE with findfiles()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

bundle common findfiles
{
  vars:
    # * in filenames not allowed on win
    windows::
      "names" slist => { "a", "bc", "d/e/f", "g/h/i/j", "klm/nop/qrs" };
    !windows::
      "names" slist => { "a", "bc", "d/e/f", "g/h/i/j", "klm/nop/qrs", "tu/*" };
}

#######################################################

bundle agent init
{
  files:
      "$(G.testdir)/$(findfiles.names)"
      create => "true";

  reports:
    DEBUG::
      "Created $(G.testdir)/$(findfiles.names)";
}


#######################################################

bundle agent test
{
  meta:
      "description" -> { "CFE-3292" }
        string => "Test that findfiles() works as expected.";

      #"test_suppress_fail" string => "windows",
      #  meta => { "redmine4730" };
      # This test should be merged with findfiles.cf when it's fixed.
      # In order to soft-fail it as requested, I had to strip it to a separate-test
      "test_soft_fail" string => "any",
        meta => { "CFE-3292" };

  vars:
      "patterns[GLOB_BRACE]" string => "$(G.testdir)/{a,bc}";

      "pnames" slist => getindices("patterns");

      "found[$(pnames)]" slist => findfiles("$(patterns[$(pnames)])");
      "found_string[$(pnames)]" string => join(",", "found[$(pnames)]");


  reports:
    DEBUG::
      "findfiles pattern $(pnames) '$(patterns[$(pnames)])' => '$(found_string[$(pnames)])'";
}


#######################################################

bundle agent check
{
  vars:
      "expected[GLOB_BRACE]" string => "$(G.testdir)/a,$(G.testdir)/bc";

      "expects" slist => getindices("expected");

      "fstring" slist => getindices("test.found_string");

      "joint_condition" string => join(".", "expects");

  classes:
      "$(expects)" expression => strcmp("$(test.found_string[$(expects)])", "$(expected[$(expects)])");
      "ok" expression => "$(joint_condition)";

  reports:
    DEBUG::
      "pattern $(expects) matches as expected: '$(expected[$(expects)])'"
      ifvarclass => "$(expects)";

      "pattern $(expects) does NOT match expected: '$(test.found_string[$(expects)])' != '$(expected[$(expects)])'"
      ifvarclass => "!$(expects)";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
