#######################################################
#
# mtime server copy, for non-localhost, should copy
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

#######################################################

bundle agent init
{
files:

  "$(G.testdir)/destination_file"
      delete => clean;

  "$(G.testdir)/source_file"
       create => "true",
    edit_line => init_src_file,
edit_defaults => empty;
}

#######################################################

body edit_defaults empty
{
empty_file_before_editing => "true";
edit_backup => "false";
}

#######################################################

bundle edit_line init_src_file
{
insert_lines:
   "This is the source file to copy $(sys.date) - always fresh";
}

#######################################################

body delete clean
{
rmdirs => "true";
}

#######################################################

bundle agent test
{
files:

    "$(G.testdir)/destination_file" copy_from => copy_src_file,
                              classes => if_repaired("repaired");
}

#########################################################

body copy_from copy_src_file

{
source      => "$(G.testdir)/source_file";
servers     => { @(sys.ip_addresses) }; # localhost is always granted
compare     => "mtime";
copy_backup => "false";

portnumber => "9878"; # lan_open

#encrypt     => "true";
#verify      => "true";
#purge       => "false";
#type_check  => "true";
#force_ipv4  => "true";
trustkey => "true";
}

#######################################################

bundle agent check
{
classes:
  "dummy" expression => regextract("(.*)\.sub", $(this.promise_filename), "fn");

methods:

  "any" usebundle => default_check_diff("$(G.testdir)/source_file","$(G.testdir)/destination_file","$(fn[1])");
}

#######################################################

body classes if_repaired(x)
{
promise_repaired => { "$(x)" };
}
