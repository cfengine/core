##############################################################################
#
# Redmine #3842: ensure correct sys.flavor, sys.arch on HP-UX
#
##############################################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence => { default("$(this.promise_filename)") };
      version => "1.0";
}

bundle agent check
{
  vars:
      "expected[flavor]" string => ifelse("hpux", "hp-ux_.+",
                                          "unknown");

      "expected[arch]" string => ifelse("hpux", "ia64",
                                        "unknown");

      "checks" slist => getindices("expected");

      # If the output contains the string, we fail
  classes:
      "ok_$(checks)" expression => regcmp("$(expected[$(checks)])", "$(sys.$(checks))");
      "unknown_$(checks)" expression => strcmp("$(expected[$(checks)])", "unknown");

      "ok" and => { "ok_flavor", "ok_arch" };
      "skipped" and => { "unknown_flavor", "unknown_arch" };

  reports:
    EXTRA::
      "check $(checks) was OK: expected '$(expected[$(checks)])' matches sys.$(checks)" ifvarclass => "ok_$(checks)";
      "check $(checks) was unknown (skipped)" ifvarclass => "unknown_$(checks)";

    DEBUG::
      "check $(checks) was not OK: expected '$(expected[$(checks)])' does not match sys.$(checks) = '$(sys.$(checks))'"
      ifvarclass => "!ok_$(checks).!unknown_$(checks)";

  methods:
    !skipped::
      "" usebundle => dcs_passif_expected("ok_flavor,ok_arch", # expected
                                          "", # not expected
                                          $(this.promise_filename)),
      inherit => "true";

    skipped::
      "" usebundle => dcs_pass($(this.promise_filename));
}
