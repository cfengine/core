\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}
@c %** start of header
@setfilename cfnova.info
@settitle CFEngine Nova Technical Supplement
@setchapternewpage odd
@c %** end of header
@titlepage
@title CFEngine Nova Technical Supplement
@subtitle CFEngine Enterprise Documentation
@subtitle for version 2.1
@author CFEngine
@c @smallbook
@fonttextsize 10
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2011 CFEngine AS.
The features described herein are in provided for user convenience and imply no warranty whatsoever
to the extent of applicable law.
@end titlepage
@c *************************** File begins here ************************
@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Reference:
                        CFEngine is a language based framework
                        designed for configuring and maintaining
                        Unix-like operating systems attached
                        to a TCP/IP network.
@end direntry
@end ifinfo
@ifnottex
@node Top, Introduction to CFEngine Nova, (dir), (dir)
@top CFEngine-AutoReference
@end ifnottex
@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
<h2>Summary of contents</h2>
@end html
@end ifhtml

@iftex
@contents
@end iftex
@c *****************************************************
@c * CHAPTER
@c *****************************************************
@menu
* Introduction to CFEngine Nova::  
* Mission Portal::              
* Business Integration::        
@end menu

@node Introduction to CFEngine Nova, Mission Portal, Top, Top
@chapter Introduction to CFEngine Nova


CFEngine Nova is a commercially licensed version of the core CFEngine
software@footnote{Major version 3} with enterprise library extensions. All of
the documentation for CFEngine 3 applies to CFEngine Nova. This
document is a supplement describing features particular to CFEngine Nova.

The aim of CFEngine Nova is to offer a knowledge-enhanced framework
for configuration management that goes beyond mere technical
configuration to support the needs of businesses. Features include
compliance management, reporting and business integration, and tools
for handling necessary complexity. CFEngine Nova has features to support
Cloud Computing for public and private clouds, as well as greater integration
facilities with database resources.

You should use this brief guide to CFEngine Nova's features in concert with
the CFEngine Concept Guide and CFEngine Reference Manual, available
from the CFEngine website, or in the @file{docs} directory of your
Nova hub installation.


@menu
* What are enterprise versions?::  
* What's new in Nova 2.1?::     
* About the CFEngine architecture::  
* Nova Commercial Enhancements::  
@end menu

@node What are enterprise versions?, What's new in Nova 2.1?, Introduction to CFEngine Nova, Introduction to CFEngine Nova
@section What are enterprise versions of CFEngine?

CFEngine Enterprise versions contain features designed to both extend
and simplify the use of CFEngine in enterprise scenarios.  This
includes quick setup, business alignment features and improved
self-documentation, ultimately providing a single framework for
self-healing, hands-free automation with integrated knowledge
management. Each extended feature has been carefully designed to meet a specific
need in the server life-cycle, replacing cumbersome or insecure
technologies currently available in datacentre products.
CFEngine Nova adds the following capabilities:

@sp 1
@itemize
@item Scalable management of complex, federated environments.
@item Powerful Web-based graphical user interface
@item Lightweight reporting engine.
@item Distributed orchestration of tasks.
@item Virtualization control (using libvirt).
@item Simplified policy writing with Content-Driven Policies.
@item Integrated Knowledge Management.
@item Bundle managed services.
@item Provides a simple window onto IT Operations for Business.
@end itemize
@sp 1

Of course, as a Nova user, you have access to all of the features of
the CFEngine Community Edition, and access to its on-line and community
resources.

@node What's new in Nova 2.1?, About the CFEngine architecture, What are enterprise versions?, Introduction to CFEngine Nova
@section What's new in Nova 2.1?

CFEngine Nova 2.1 is a major upgrade of CFEngine's commercial software, including the
latest community core and many improvements to the language interface.
Some of the major features in Nova 2.1 include:

@itemize
@item A new browsable Web interface (Mission Portal) utilizing client-side Javascript, allows you to see policy and state side by side.
@item Finder, viewer, editor model for application interface.
@item Expanded monitoring on Linux and Solaris (cf-agents will report more basic data, such as load and cpu, "vital signs").
@item Support for multiple release environments, for example staging and production from one Hub.
@item External authentication for Mission Portal (LDAP, OpenLDAP, Active Directory)
@item User class system with individual accounts, logins and management (Admin, Developer, Manager, Faculty, etc.).
@item Collaboration tools: Store notes, publish messages/status per user account, activity log.
@item Searchable reporting and analytics.
@item Improved Copernicus Knowledge Map, providing searchable on-line documentation, integrated with the policy browser.
@item Simplified management through Content-Driven Policies.
@item Improved data transportation protocol efficiency (not backwards compatible but will fallback to legacy protocol if not supported on both sides)
@item Save searches
@end itemize

In addition to these features, Nova 2.1 is built around our extensive bug-reporting and
self-diagnostic test suite that has allowed us to improve the reliability and
functionality of the software for the most demanding environments.


@node About the CFEngine architecture, Nova Commercial Enhancements, What's new in Nova 2.1?, Introduction to CFEngine Nova
@section About the CFEngine architecture

@menu
* CFEngine is agent based software::  
* Single point of coordination::  
* Requirements and scalability of CFEngine Nova::  
* Phases of the server life-cycle::  
@end menu

@node CFEngine is agent based software, Single point of coordination, About the CFEngine architecture, About the CFEngine architecture
@subsection CFEngine is agent based software

CFEngine is agent based software. It resides on and runs processes on
each individual computer under its management. That means you do not
need to grant any security credentials for login to CFEngine. Instead, for
normal operation, CFEngine runs in privileged `root' or
`Administrator' mode to get access to system resources and makes these
available safely to authorized inquiries.

A CFEngine installation is thus required on every machine you want to
manage: client and server, desktop or blade.  Typically, you will
single out one machine to be a @i{policy server} or @i{hub}. In very
large networks of many thousands of machines, you might need several
policy servers, i.e. several hubs. 

@node Single point of coordination, Requirements and scalability of CFEngine Nova, CFEngine is agent based software, About the CFEngine architecture
@subsection Single point of coordination

The default CFEngine Nova architecture uses a single hub or policy
server to publish changes of policy and to aggregate knowledge about
the environment, but you can set up as many as you like to manage
different parts of your organization independently.  The CFEngine
technology is not centralized by nature. Most users choose to
centralize updating of policy and report aggregation for convenience
however. 

@sp 1
@image{hub,10cm,,The front page,png}
@center Figure: A policy server or `hub' is implemented in CFEngine Nova
@center as a simple solution that will scale for most sites `out of the box'.
@sp 1

If you operate CFEngine Nova in its default mode, the hub acts as a
server from which every other client machine can access policy
updates. It also acts as a collector, aggregating summary information
from each machine and weaving it into a knowledge map about the datacentre.

For a single hub configuration, the figure below shows a normal
process approach to managing policy. Policy is edited and developed at
a Policy Definition Point, outside of normal production
environment. This can be done using the specialized editor embedded
in CFEngine Nova, or it can be done using any text editor of your choice.

Edits are made in conjunction with a version control
repository@footnote{CFEngine supports integration with Subversion
through its Mission Portal, but any versioning system can of course be
used.}, which should be used to document the @i{reasons} for changes
to policy@footnote{CFEngine and version control will document @i{what}
the changes are, but what is usually missing from user documentation
is an explanation of the reasoning behind the change. This is most
valuable when trying to diagnose and debug changes later.}.  When a
change has been tested and approved, it will be copied manually to the
policy dispatch point on one or more distribution servers. All other
machines will then download policy updates from that single location according
to their own schedule.

@sp 1
@image{arch,15cm,,The front page}
@center Figure: Policy coordinated from a central root location
@center is implemented in a distributed manner at every leaf node.
@sp 1


@node Requirements and scalability of CFEngine Nova, Phases of the server life-cycle, Single point of coordination, About the CFEngine architecture
@subsection Requirements and scalability of CFEngine Nova

The default architecture and configuration skeleton is expected to
scale to a few thousand hosts with a dedicated policy hub. Your hub
machine should have at least 2 GB of memory and a modern processor.
You will need about 2 MB of disk storage for every machine under
CFEngine's management.

CFEngine will scale to very large systems, with tens of thousands of
machines. This is only possible because of its decentralized agent-based
operation. CFEngine encourages the federation of policy in complex
environments, so that local domain experts manage what they know and
baseline policies can be handled generally for all. We also encourage
a practice of small adjustments, as opposed to large risky redesigns
of operational policy.

@sp 1
@cartouche
CFEngine's recommended practice is to encourage small incremental changes
to policy, not to save up changes into  `big project roll-outs'. This
strategy lowers the risk of error and offers improved scalability.
@end cartouche
@sp 1

CFEngine will operate autonomously (hands-free) in a network, under
your guidance.  If your site is large (thousands of servers) you
should spend some time discussing with CFEngine experts how to tune
this description to your environment as @emph{scale} requires you to
have more infrastructure, and a potentially more complicated
configuration. The essence of any CFEngine deployment is the same.

@node Phases of the server life-cycle,  , Requirements and scalability of CFEngine Nova, About the CFEngine architecture
@subsection Phases of the server life-cycle

The four phases in managing systems, summarized in the Build, Deploy,
Manage, Audit (BDMA) framework originated with a model of system
management based on transactional changes (`roll-out').  CFEngine's conception of
management is some different, as transaction processing is not a good
model for highly distributed systems, but we can use this template to see how
CFEngine works differently.

@table @emph
@item Build
CFEngine is often used together with other tools to build new machines,
whether virtual or real. You integrate it into the `kickstart' or `jumpstart'
process, using PXE network booting, etc, by including the CFEngine software
in the initial build and executing CFEngine once at the end of the installation.

To complete the installation of your system, you create a set of
promises about the system state, or policy-template of proposed
promises. When systems keep these promises, they will function
seamlessly as planned. 

@item Deploy
Deploying software or changes really means implementing the policy
that has been decided.  In CFEngine you simply publish your proposed
policy and the machines can adjust accordingly.  Each installed agent
is capable of implementing policies and maintaining them over time
without further assistance.

@item Manage
Once a decision is made, unplanned events will occur. Such
incidents usually set off alarms and humans rush to make new transactions
to repair them. In CFEngine, the autonomous agent manages the system,
and you only have to deal with rare events that cannot be dealt with
automatically.

@item Audit

Promises are assured by design in CFEngine and maintained
automatically, so the main worry when using CFEngine is whether or not
you have coded conflicting intentions. The compliance of machines
with the policy template is easily measured by CFEngine, using its
model-oriented approach. This can be viewed from the web-browsable
interface.

@end table


@node  Nova Commercial Enhancements,  , About the CFEngine architecture, Introduction to CFEngine Nova
@section Nova Commercial Enhancements

The enhancement provided by CFEngine Nova fall into a number categories:

@sp 1
@itemize

@item Business transparency and reporting enhancements, providing insight into IT operations
for both Business and IT. CFEngine Nova connects the dots between high level business goals and
low level configuration, supporting Knowledge Management for ITIL processes.

@item Productivity enhancements -- easier getting started and making changes.

@item Continuity and repair related enhancements.

@item Full integrated Knowledge Management.

@item Special support for operating system features and virtualization, such as Solaris zones
and the libvirt interface.



@item Native support for the Windows platform, with access to the configuration of
the Windows registry, processes and file access control lists.

@end itemize
@sp 1

@menu
* Productivity enhancements::   
* Functional enhancements::     
* Reporting enhancements::      
* Documentation enhancements::  
* Knowledge Management in Nova::  
@end menu



@node  Productivity enhancements, Functional enhancements, Nova Commercial Enhancements, Nova Commercial Enhancements
@subsection Productivity enhancements

Features that are designed to make it easier to work with
CFEngine on a day to day basis.

@itemize
@item  Simple automatic installation (one command per system)
@item  A template library of managed services for common platforms.
@item  Auto-analyzing system knowledge console
@item  Policy mining and semantic knowledge representation
@item  Auto-classification of systems
@item  Performance and Service Level reports
@item  On- and off-line syntax look-up.
@item  Integration with LDAP directory services.
@end itemize

The most important productivity tool is the CFEngine Mission Portal,
which contains an interface for browsing Mission status and interacting with Mission planning and engineering. Get an overview of compliance status and business value, see the current state of system repair, plan and make policy changes, or browse the Knowledge Map to increase your understanding of your system and policies.

A library of managed services for common Linux operating systems is
provided as part of the knowledge base. This makes setting up specialized
service nodes a simple process of matching hosts to services from a required
list.

The ability to look up syntax on the fly, from the web or the command
line, can save experienced users considerable time. Using the tools
for database interaction, the process of setting up a CFEngine
knowledge base at your organization is fully automated and you only
have to think about local customizations you want to make.

LDAP query functions have been added for integration with
LDAP services or Active Directory information, allowing a single
point of definition for system lists and identity management.

@node  Functional enhancements, Reporting enhancements, Productivity enhancements, Nova Commercial Enhancements
@subsection Functional enhancements

@itemize
@item Redundant hub functionality for mission critical operations
@item Database verification and editing including SQL (Mysql,Postgres)
@item MS Registry management and repair
@item File-system ACL security management (Linux, Windows, Solaris)
@item Extended monitoring probes and system classification capabilities.
@end itemize

These include the ability to interact with and repair popular SQL databases
(currently MySQL and PostgreSQL), as well as embedded system databases
such as the Microsoft System Registry, defining, validating, scanning
or repairing their tabular structure and the data within them.

@itemize
@item  Access remote CFEngine variables (like a simple directory service)
@item  LDAP directory service integration
@item  Role based access control on policy execution by class.
@end itemize

Access Control List (ACL) support for Linux is now added for pinpoint
accuracy in file permission security. CFEngine Nova's ACL support
includes a completely new generic CFEngine model for ACLs that will
translate across multiple platforms so that users can as closely as
possible translate identical requirements across multiple platforms
with different implementations.  Native ACLs are also supported.

Fault tolerant features have been added in Nova to functions for retrieval
of data from network connections. It is risky to rely on data from a
network when configuring hosts. If the network connection could fail, erroneous
data might be written to a local configuration. Nova adds local caching to
network results and works opportunistically to provide the latest known
values; however, look-up functions, such as LDAP retrieval of @code{remotescalar}
data will not fail.


@node Reporting enhancements, Documentation enhancements, Functional enhancements, Nova Commercial Enhancements
@subsection Reporting enhancements

Nova can provide a wider range of system reports about information
collected by CFEngine on performance, security and state. This
includes the ability to perform custom system discovery, and log the
data into a variety of special reports.

@sp 1
@cartouche
Discovery and measurement promises are made through CFEngine's
lightweight custom monitoring capabilities.
@end cartouche
@sp 1

@itemize
@item  HTML, XML, CSV, PDF report generation
@item  Service and performance level reports
@item  Reliability reports
@item  Deep history analysis and visualization, through knowledge base.
@item  Policy dependency and impact analysis reporting
@end itemize

Information can be extracted in HTML, XML, PDF, and text formats (e.g. CSV)
for easy integration with other presentation tools, or for direct
viewing through the knowledge console.

As part of policy-writing, CFEngine Nova allows you to track
dependencies on policy items.  The knowledge agent can take this
information, analyze it and present it as part of an overview of the
system (see the chapter on Knowledge Management for more information).
This enables virtual impact analysees to be inspected.


@node Documentation enhancements, Knowledge Management in Nova, Reporting enhancements, Nova Commercial Enhancements
@subsection Documentation enhancements

Additional documentation is provided for Nova users through program
built-in help, additional manuals and integration of syntax
information into the CFEngine Knowledge Console.

An annoying aspect of any software is the need to browse through a manual
to find quick answers to questions. Ideally one would only look at manuals
during a learning phase; thereafter we want to see examples and summaries of
what we basically already know but cannot keep in our heads.

System administrators often prefer to work in the command line and
find the need to go to a manual a distraction. Indeed, if the network
is non-functional or we are working off-line, instant command line
help is a great bonus.  Other users prefer the point and click of a
familiar web interface. CFEngine Nova provides both these options to
users to provide quick answers.

Of the two, a web interface is clearly the most flexible. Far more
information can be browsed on the web than is practical with a simple
text interface. However, of the two, the command line interface is by
far the fastest way to get answers to simple questions of syntax.
CFEngine's knowledge agent knows CFEngine's syntax tree and can
summarize it at the keyword level.

@sp 1
@cartouche
@smallexample

atlas$ ./cf-know --syntax link_from
Constraint link_from (of promise type files) has possible values:

   link_from  ~ defined in a separate body, with elements

     source                ~ ()
     link_type             ~ (symlink,hardlink,relative,absolute,none)
     copy_patterns         ~ ()
     when_no_source        ~ (force,delete,nop)
     link_children         ~ (true,false,yes,no,on,off)
     when_linking_children ~ (override_file,if_no_such_file)

Description: A set of patterns that should be copied and synchronized instead of linked

@end smallexample
@end cartouche




@node Knowledge Management in Nova,  , Documentation enhancements, Nova Commercial Enhancements
@subsection Knowledge Management in Nova

The future of datacentre management lies in a more complete model of knowledge and transparency
for processes and resources. CFEngine Nova provides a platform for this through:

@itemize
@item Auto-generated central knowledge console.
@item Access to CFEngine's company support knowledge base.
@item Tie-in knowledge base with local documentation.
@item Dependency mapping between promises in CFEngine, with integration into the semantic
@item Trace high level policies to low level policies
@end itemize


@c *****************************************************
@c * CHAPTER
@c *****************************************************
@node Mission Portal, Business Integration, Introduction to CFEngine Nova, Top
@chapter Mission Portal

Knowledge management has become a new focus in IT management, and it
is a core focus at CFEngine. Comprehending the growing complexity of
IT operations is one of the main challenges in IT today. CFEngine Nova
has a number of key features for knowledge management, including
automated documentation, report generation and associative inference. The
CFEngine Mission Portal is the centerpiece of user interaction with
CFEngine Nova. It offers insight into three main areas:
@itemize
@item Operations and performance.
@item Business and compliance.
@item Organizational knowledge and library.
@end itemize

@sp 1
@image{img-mission-portal-nova-2-1,15cm,,The Mission Portal}
@center Figure: The mission portal
@sp 1

The Mission Portal uses a finder, viewer, editor model as an application interface, applicable in four main categories:

@itemize -
@item Mission Status: a top level overview of compliance status and business value
@item Mission Engineering: a place to see the current state of system repair
@item Mission Planning: a place to plan and make policy changes
@item Mission Library: a knowledge bank that connects information together
@end itemize

Each of these categories is a beginning from which you can refine your overview and search
through information.

@menu
* Mission Status::              
* Mission Engineering::         
* Mission Planning::            
* Mission Library::             
* Report extensions::           
* Should monitoring and configuration be separate?::  
* CMDB and CFEngine::           
* Decentralized data collection in CFEngine::  
@end menu

@node  Mission Status, Mission Engineering, Mission Portal, Mission Portal
@section Mission Status

Mission status is a high level summary of how well the entire system is behaving. Charts show the business value of the promises kept/not kept as well as host status. Each host is classified into red, yellow, green and blue for a quick overview of their level of compliance. 

@sp 1
@image{img-status,15cm,,Mission Status}
@center Figure: The status of IT operations.
@sp 1

@node Mission Engineering, Mission Planning, Mission Status, Mission Portal
@section Mission Engineering

Mission engineering illustrates the state of the system in relation to the desired state at all scales. Zoom in to specific areas and examine the impact of promises, query data, and extract reports using the finder functions.

@sp 1
@image{img-engineering,15cm,,Mission Engineering}
@center Figure: Mission Engineering
@sp 1

Clicking further on a host takes you do detailed performance data as measured by CFEngine’s
monitoring daemon. We call this view pseudo-real time monitoring data, because there is always some delay between
when data were measured and when they become available for you to view. Most tools simply hide
this delay, but CFEngine tells you precisely when data were last updated, providing crucial information
about system latencies.

@page
@node Mission Planning, Mission Library, Mission Engineering, Mission Portal
@section Mission Planning

Make changes to policies, goals determined by promises and implement specific tactics to achieve the desired state. Interact with data, approve changes and anomalies. Get an overiew of users logged on to the Mission Portal, as well as their current activity.

@sp 1
@image{img-planning,15cm,,Mission Planning}
@center Figure: Mission Planning
@sp 1


@page
@node Mission Library, Report extensions, Mission Planning, Mission Portal
@section Mission Library

The Library contains finders for documents, topics, a notes archive, and (external) link to the CFEngine community. The topic finder will lead to the Knowledge Map, a useful reference and learning tool. It is designed to show relationships between subjects of importance and provides an index of the information in the knowledge base. Also useful for brainstorming and self-learning.

@sp 1
@image{img-library,15cm,,Mission Library}
@center Figure: Mission Library
@sp 1
@center @image{img-topicsviewer,15cm,,Topics viewer}
@center Figure: Topics viewer (Knowledge map)
@sp 1


@node Report extensions, Should monitoring and configuration be separate?, Mission Library, Mission Portal
@section Reports in the Mission Portal

A significant capability of CFEngine Nova over previous versions of
CFEngine is the existence of automated system reporting. CFEngine collects
history, state and change data about computers and ties them together.
The CFEngine strategy is to replace conventional CMDBs with a more
scalable and flexible approach to information mining over the coming
years. Commercial versions of CFEngine are designed to bring state of
the art methods to the problem of information management for IT
operations.

In CFEngine Nova 2 reports are summarized and collected automatically by
the @code{cf-hub} program. This is a daemon which runs only on the system
hub or policy server. Its sole function is to connect to all registered
systems and build a searchable summary of its running state, in as efficient
a manner as possible.

In addition to the automated hub, reports may be generated on each individual
host using the @code{cf-report} program. This generates reports in a variety of
formats, either for direct viewing (in HTML) or for import/export to other
software systems, using XML, CSV or PDF output formats.  


@node Should monitoring and configuration be separate?, CMDB and CFEngine, Report extensions, Mission Portal
@section Should monitoring and configuration be separate?

@sp 1
The traditional view of IT operations is that configuration,
monitoring and reporting a three different things that should not be
joined. Traditionally, all three have been independent centralized
processes. This view has emerged historically, but it has a major
problem.

Monitoring as an independent activity is inherently non-scalable.
When numbers of hosts grow beyond a few thousands, centralized
monitoring schemes fail to manage the information. Tying configuration
(and therefore repair) to monitoring at the host level is essential
for the effective management of large and distributed data facilities.
CFEngine foresaw this need in 1998, with its Computer Immunology
initiative, and continues to develop this strategy.

CFEngine's approach is to focus on scalability. The commercial editions
of CFEngine provide what meaningful information they can in a manner that
can be scaled to tens of thousands of machines.

@node CMDB and CFEngine, Decentralized data collection in CFEngine, Should monitoring and configuration be separate?, Mission Portal
@section CMDB and CFEngine

@sp 1

A Configuration Management Database (CMDB), sometimes called a Change
and Configuration Management Database (CCMDB), is a repository of
information about hardware and its expected state. CMDBs are basically
an outgrowth of @i{inventory databases}. They were embraced by many IT
companies as a plausible solution to configuration management, in the
absence of an alternative.

A CMDB records so-called @i{configuration items} (CI), which record
technical, ownership and proposed state data. A CMDB does not
generally record actual state -- this is left for monitoring software.

The term CMDB originates from the IT Infrastructure Library (ITIL)
framework, where it is given a prominent role in system planning and
verification. The CMDB is by definition a centralized repository.

CFEngine deviates from the classical view of a CMDB to modernize the
concept for modern scaling requirements.  Configuration management
requires something more sophisticated than a database to describe
system patterns. The CMDB applies a @i{brute force} approach to
collection and searching of system data that does not scale well, and requires
large and expensive resources to manage.

CFEngine works with a highly compressed description of system
properties that is based on category classification rather than an
exhaustive inventory of computers. Being distributed in operation,
CFEngine can also enforce policy on state, without brute force imaging.

@node Decentralized data collection in CFEngine,  , CMDB and CFEngine, Mission Portal
@section Decentralized data collection in CFEngine
@sp 1

CFEngine is designed to scale to vast numbers of machines.  It does so
because it is fundamentally decentralized. Data about system state are
recorded @i{in situ} and are not transmitted over the network
directly. CFEngine summarizes and compresses system information before
making it available for central aggregation and analysis. This means
that high resolution data are available where they count, processing
is decentralized, and inexpensive summaries may be compared and mined
for correlations. 

CFEngine's distributed architecture means that no data are lost if the
network fails temporarily. CFEngine uses the network @i{opportunistically},
but it is not reliant on it for real-time operations.


@c *****************************************************
@c * CHAPTER
@c *****************************************************
@node Business Integration,  , Mission Portal, Top
@chapter Business Integration


@menu
* Nova attends to business goals::  
* Business value reports::      
* Simple insight into IT compliance::  
@end menu

@node Nova attends to business goals, Business value reports, Business Integration, Business Integration
@section Business goals and the Service Catalogue

@sp 1
Trust and confidence form just one of the pillars of business; agility
and creativity make up the others.  CFEngine Nova brings features that
make it possible to connect the dots meaningfully between high level
business goals and low level configuration implementation.
This enables different layers of an organization to gain insight into how
the system is being managed, in relation to the strategic goals.

@itemize
@item CFEngine Nova's rich repertoire of configuration capabilities
allows model-based integration of systems, attending to the unique requirements
of each business service. Off-the-shelf does not have to mean bland and generic.
Customization is CFEngine's forte. It is the glue holding applications together.

@item Nova's speed and use of patterns allows many small changes to be made
very quickly.
@end itemize
Nova provides appropriate insight into IT operations
through explanation, reporting and visualization of policy, allowing
business and IT to gather around information of mutual interest.
Of course, CFEngine is not going to make IT experts of business staff, or vice
versa.  However, business and IT work best together when then can
communicate effectively.  Our aim with Nova is to give business heads
just the right level of insight into technical IT operations to be assured that
their needs are being met@footnote{Often it is enough to be able to
ask a relevant question and feel that one has a voice, while experts are taking care of the details.}. Similarly,
Nova makes business goals available to IT staff so that they can feel
connected and responsible for the strategic goals of the organization.

@float
@sp 1
@center @image{img-servicecatalogue,15cm,,iso,png}
@center A human-readable Service Catalogue generated from technical specifications
@center shows what goals are being attended to automatically
@sp 1
@end float


The Service Catalogue is a concept that has been promoted as part of
the IT Infrastructure Library (ITIL).  Nova generates a service
catalogue directly from a model of the knowledge about policy.

@verbatim
bundle agent service_catalogue
{
methods:

   "everyone" usebundle => time_management,
                comment => "Ensure clocks are synchronized";

   "everyone" usebundle => garbage_collection,
                comment => "Keep disks free of junk and rotate logs";

   "everyone" -> goal_3,

              usebundle => change_management,
                 comment=> "Monitor change";

   "managed hosts" -> goal_1,

                   usebundle => CFEngine_management,
                     comment => "Management of CFEngine internals";

   "mail server"  -> { "goal_3", "goal_1", "goal_2" }

                  usebundle => app_mail_postfix,
                    comment => "The mail delivery agent";
}

@end verbatim

Technical IT administrators can document which promises or bundles of promises
are directed towards specific goals by adding a simple reference
The Nova Knowledge Map will then build a narrative around these references
and tie the goals to the services in the catalogue (See the Planning room in the Mission Portal).


@node Business value reports, Simple insight into IT compliance, Nova attends to business goals, Business Integration
@section Business value reports

One of the capabilities of CFEngine is to add business or
organizational value to the configuration model. The notion of
business value is not a clear concept, but a very simple
approach to measuring value is to attach a monetary value
to the outcome of promises. 

The @code{value_kept} (default value 1), @code{value_repaired}
(default value 0.5), @code{value_notkept} (default value -1) settings
fall under CFEngine transaction logging and allow administrators to
attach actual monetary (or other) values to promises kept, or issues
repaired, or conversely measure the loss of non-compliance in dollar
terms (choose your currency). This value is summed and recorded for
each execution of CFEngine, and can be turned into graphs for your
management reports.

An example of this report is shown below. The results are summed for each day and
presented in column form.

@float
@sp 1
@center @image{img-businessvaluereport,15cm,,iso,png}
@center Business value accounting can be entered into the model.
@sp 1
@end float



@node Simple insight into IT compliance,  , Business value reports, Business Integration
@section Simple insight into IT compliance

While business and IT can come together to decide what promises IT services
should keep, a simple confirmation of that compliance helps business units
to be assured
@float
@sp 1
@center @image{img-status,14cm,,iso,png}
@center An overview of compliance
@sp 1
@end float
Increasing and graded levels of detail can be obtained to match the level of expertise
of the viewer. Bar meters can represent more specific details.

@float
@sp 1
@center @image{img-weakesthostsviewer,14cm,,iso,png}
@center Weakest hosts broken down by compliance, performance and change.
@sp 1
@end float

For system analysts, Nova can recognize and highlight trends and patterns of behavior
that inform further strategic decision making.

@float
@sp 1
@center @image{img-vitalsviewer,14cm,,iso,png}
@center Analysis of system performance over multiple time-scales
@center can aid with resource deployment and future planning.
@sp 1
@end float



@c =========================================================================
@c @node Index,  , CFEngine Methods, Top
@c @unnumbered Concept Index
@c @printindex cp
@c =========================================================================
@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml
@bye
