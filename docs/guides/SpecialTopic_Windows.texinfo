\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename st-windows.info
@settitle Windows Management with CFEngine Enterprise
@setchapternewpage odd
@c %** end of header

@titlepage
@title Windows Management with CFEngine Enterprise
@subtitle A CFEngine Special Topics Handbook
@author CFEngine AS


@page

@cartouche
@quotation
CFEngine Enterprise is a cross-platform and versatile tool that unifies the
desired state management on all major operating systems.

However, some operating systems are designed fundamentally different
than others, requiring special CFEngine language features when being
described. In this document, we highlight the CFE Enterprise extensions provided
to the Windows platform.

@end quotation
@end cartouche

@vskip 0pt plus 1filll
Copyright @copyright{} 2012 CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                      CFEngine is a language based tool specifically
                      designed for configuring and maintaining
                      Unix-like operating systems attached
                      to a TCP/IP network.
@end direntry
@end ifinfo

@ifnottex
@node  Top, , (dir), (dir)
@top Windows Managment with CFEngine Enterprise
@end ifnottex

@iftex
@contents
@end iftex

@menu
* System requirements::         
* Installation::                
* Testing policies locally::    
* Windows registry management::  
* Windows service management::  
* File and folder permissions::  
* Windows-aware features in CFE Enterprise::  
* Windows special variables::   
* Windows hard classes::        
* Notes on windows policies::   
@end menu

@c @ifhtml
@c @html
@c <a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
@c <h2>Summary of contents</h2>
@c end html
@c @end ifhtml



@c acls

@c registry

@c Event log

@c policy sharing with Unix - bundles at least.

@node  System requirements, Installation, Top, Top
@unnumberedsec System requirements
@sp 1

CFEngine Enterprise, being so lightweight, works equally well on Windows
clients as on Windows servers. Both native 32-bit/x86 (package name
@code{i686}) and 64-bit/x64 (package name @code{x86_64}) packages are
available to customers. It is important that you select the
@code{x86_64} package if you are running 64-bit Windows.

Of Windows client operating systems, anything from Windows XP SP2 and
newer is supported. On the server side, Windows Server 2003 and newer
is supported.

CFEngine Enterprise communicates bi-directionally on port @code{5308}, so
make sure that this port is open for outgoing and incoming @code{TCP}
connections.

All software dependencies are bundled with the CFEngine Enterprise
package. The total disk consumption is about 70 @code{MB}, and the
memory usage is less than 30 @code{MB}.

@node  Installation, Testing policies locally, System requirements, Top
@unnumberedsec Installation
@sp 1

The installation and set-up procedure on Windows is not different than
that for other operating systems CFE Enterprise runs on, so the CFE Enterprise getting
started document available at @url{http://software.cfengine.com}
applies to the Windows version as well.

The Windows @code{msi}-packages will get silently installed (no
prompts) to @code{Cfengine} under your program files directory
(e.g. @code{C:\Program Files\Cfengine} on English Windows
versions). It is important that the installer is run with
Administrative priviliges. To ensure this, open a @code{Command
Prompt} in Administrative mode and run @samp{msiexec -i
cfengine-nova-VERSION-ARCH.msi} (replace @code{VERSION} and
@code{ARCH} appropriately).

If you are just going to test your policies on a Windows host, it is
more efficient to not bootstrap to a policy server, but run the
policies locally just after you create them. You can install the license
with the @code{cf-key -l} command -- you will need to copy over the
licensed public key as advised by @code{cf-key -l}.@footnote{Avaliable
in CFEngine Enterprise 3.0 and beyond. Run @code{cf-key -l
C:\path\to\license.dat} and follow the instructions.}

Eventually, when you are done testing and want to bootstrap a Windows
host to a policy server, please run the following command (against a
Linux-based policy server, as advised in the CFE Enterprise getting
started document). If we assume the policy server's IP address is
'123.456.789.123', you need to run the following command to bootstrap
the Windows host.

@verbatim
   C:\Program Files\Cfengine\bin\cf-agent.exe --bootstrap --policy-server 123.456.789.123
@end verbatim


@node  Testing policies locally, Windows registry management, Installation, Top
@unnumberedsec Testing policies locally

Create a new text file @code{Cfengine\inputs\promises.cf} and input
the following text using your favourite text editor.

@verbatim
body common control
{
bundlesequence => { "test" };
inputs => { "cfengine_stdlib.cf" };
host_licenses_paid => "1";
}

bundle agent test
{
reports:
windows::
  "Hello, Windows!";
}
@end verbatim

Now, go to your terminal (e.g. Command Prompt) and navigate to
@code{Cfengine\bin} under program files. Run @code{cf-promises.exe}. It
should generate no output, which indicates correct syntax and license.

To execute the policy, run @code{cf-agent.exe -K}. You should see the
following output.

@center @image{winhello,8cm,, Windows output,png}

We now have a basic skeleton policy that we can test our Windows
promises with. These can later be integrated at the policy hub to
ensure that they are run on all Windows systems. We will assume this
general skeleton for the rest of this document, modifying the contents
of the @code{test} bundle only.


@node  Windows registry management, Windows service management, Testing policies locally, Top
@unnumberedsec Windows registry management

CFEngine Enterprise supports fine-grained management of the Windows
registry. These promises are encapsulated under the @code{databases:}
promise type. 


@unnumberedsubsec Creating values

Let us modify our skeleton bundle to contain the following.

@verbatim
...
bundle agent test
{
databases:

  "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Security"

    database_operation => "create",
    database_rows => { "MaxSize,REG_DWORD,84017152", "Retention,REG_DWORD,0"},
    database_type => "ms_registry",
    comment       => "Ensure eventlog size is in accordance with standards";
}
@end verbatim

Now, we again run @code{cf-promises.exe} to ensure the syntax is
correct, followed by @code{cf-agent.exe -KI}. Note that we added the
@code{-I} option which tells @code{cf-agent.exe} to notify us on the
existing state of the system and any actions done to ensure the
desired state. The output should look like the following.

@center @image{winreg-create,13cm,,Windows registry create output,png}

When we run @code{cf-agent.exe} twice, the second run will do nothing
because the first run has already corrected the value. This is
convergence --- CFEngine is ensuring the desired state.


@unnumberedsubsec Removing values

In order to remove values instead, we just need to adjust the policy
slightly, resulting in the following bundle.

@verbatim
...
bundle agent test
{
databases:

  "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Security"

    database_operation => "delete",
    database_columns   => { "value1", "value2"},
    database_type      => "ms_registry",
    comment            => "Remove stray values generated by an application";
}
@end verbatim

Now, if you create @samp{value1} and @samp{value2} in the key above,
@code{cf-agent.exe} should show the following output.

@center @image{winreg-delete,13cm,,Windows registry delete output,png}


At the time of writing, CFE Enterprise supports the @code{REG_DWORD} (double
word), @code{REG_SZ} (string) and @code{REG_EXPAND_SZ} (expandable
string) data types, as given in the middle field of the
@code{database_rows} list elements. See the
@uref{http://cfengine.com/manuals/cf3-Reference.html#database_005frows-in-databases,CFEngine
reference manual} for an updated list of supported data types.

Also note the @code{registryvalue()} function which can be used to
read out value data from the registry and act upon it. Examples of its
use are also available in the
@uref{http://cfengine.com/manuals/cf3-Reference.html#Function-registryvalue,CFEngine
reference manual}. 


@node  Windows service management, File and folder permissions, Windows registry management, Top
@unnumberedsec Windows service management

CFEngine Enterprise can maintain complete control of the state of all
Windows services. For example, services prone to security issues or
errors can easily be given a disabled state.

@center @image{winservice-disabled_policy,8cm,,Disabled Windows service,png}

A service can also be given a running state, in which case CFEngine
Enterprise ensures that it is running, and starts it if it is not, with
parameters if desired. More advanced policy options are also
available, including support for starting and stopping dependencies,
and configuring when the services should be started (e.g. only when
they are being used).

Note that the name of a service in Windows may be different from its
``Display name''. CFEngine Enterprise policies use the name, not the display
name, due to the need of uniqueness.

@center @image{winservice-properties_name,7cm,,Windows service name and Display name,png}

A complete example of a service management bundle is show below.

@verbatim
...
bundle agent test
{
services:

windows::
 "W32Time"
     service_policy => "start",
     service_method => bootstart,
     comment => "Ensure important services are running and starting at boot";

Windows_Server_2008::
  "RemoteRegistry"
     service_policy => "disable",
     service_method => force_deps,
     comment => "Disable services that create security issues";

}
@end verbatim

This example ensures that the Windows Time service is running on all
Windows hosts, and that Remote registry is disabled on all Windows
2008 servers.


@node  File and folder permissions, Windows-aware features in CFE Enterprise, Windows service management, Top
@unnumberedsec File and folder permissions

CFEngine Enterprise can ensure the permissions or Access Control Lists
(@code{ACLs}) of your Windows systems are correctly set. Windows
@code{ACLs} are a complex topic by itself, with support for more than
ten different permission bits and inheritance. CFE Enterprise supports all of
this, but we will just cover the basics in this document.

The following policy will ensure strict permissions on a directory
@samp{C:\Secret} and a file @samp{C:\Secret\file.txt}.

@verbatim
...

bundle agent test
{
vars:
  "acl_secret_dir" slist => { "user:Administrator:rwx:allow", 
                              "group:Administrators:rx:allow" };
  "acl_secret_file" slist => { "user:Administrator:rw:allow" };

files:

windows::
  "C:\Secret",
    acl => ntfs( "@(acl_secret_dir)" ),
	depth_search => include_base,
	perms => owner( "Administrator" );

  "C:\Secret\file.txt",
    acl => ntfs( "@(acl_secret_file)" ),
	perms => owner( "Administrator" );
}
@end verbatim

The @uref{http://cfengine.com/manuals/cf3-Reference.html#acl-in-files,
CFEngine reference manual} contains a description of all the available
@code{ACL} options. Also refer to the the CFEngine Enterprise Owner's manual
for a more in-depth discussion of the @code{ACL} options available.

@node  Windows-aware features in CFE Enterprise, Windows special variables, File and folder permissions, Top
@unnumberedsec Windows-aware features in CFE Enterprise

CFEngine Enterprise integrates with the Windows operating system in multiple
ways.

The CFEngine scheduler in CFE Enterprise (@code{cf-execd}) runs as a Windows
service. This means it runs in the background and starts with Windows,
before any user logs in. It can be configured, started and stopped
from the ``Services'' listing in Windows, just like any other Windows
service.

Event logs are the Windows counterpart to syslog from Unix. The main
difference is that event logs aim to group similar log messages,
giving each group an event id. The following event ids are defined in
CFEngine Enterprise, allowing categorisation of the log message based on its
type. The CFE Enterprise event logs can be found under the ``System'' logs.

@multitable @columnfractions .4 .2 .2
@headitem Description @tab Event ID @tab Type
@item Promise kept @tab 100 @tab Information
@item Promise repaired @tab 101 @tab Information
@item Promise not repaired due warn only policy @tab 102 @tab Error
@item Promise not repaired due to error @tab 103 @tab Error
@item Report promise @tab 104 @tab Information
@item Generic information @tab 105 @tab Information
@item Generic verbose @tab 106 @tab Information
@item Generic warning @tab 107 @tab Warning
@item Generic error @tab 108 @tab Error
@end multitable

@center @image{winevent-notkept-storage,10cm,,Promise not kept in Event Viewer,png}

By default, only promise not repaired and generic error events are
logged to avoid flooding the Event Log. You can turn on verbose
logging to log all messages, like the following example.


@verbatim

body common control
{
inputs => { "cfengine_stdlib.cf" };
bundlesequence  => { "main" };
}

bundle agent main
{
files:
"C:\test.txt"
  create => "true",
  action => log_verbose;
}

@end verbatim

@node  Windows special variables, Windows hard classes, Windows-aware features in CFE Enterprise, Top
@unnumberedsec Windows special variables
Three new special variables have been added to the Windows version of
CFEngine Enterprise.

@itemize

@item @code{sys.windir} contains the Windows directory,
e.g. ``C:\WINDOWS''.

@item @code{sys.winsysdir} contains the Windows system directory,
e.g. ``C:\WINDOWS\system32''.

@item @code{sys.winprogdir} contains the program files directory,
e.g. ``C:\Program Files''.

@end itemize

Note that these variables are not statically coded, but retrieved from
the current system. For example, @code{sys.winprogdir} is often
different on Windows versions in distinct languages.


@node  Windows hard classes, Notes on windows policies, Windows special variables, Top
@unnumberedsec Windows hard classes
The Windows version of CFEngine Enterprise defines hard classes to pinpoint
the exact version of Windows that it is running on, the service pack
version and if it's a server or workstation.

First of all, the class @code{windows} is defined on all Windows
platforms. For Windows workstations, such as Windows XP,
@code{WinWorkstation} is defined. On Windows servers, such as Windows
Server 2003, @code{WinServer} is defined. In addition, if the server
is a domain controller, @code{DomainController} is defined. Note that
if @code{DomainController} is defined, then @code{WinServer} is also
defined, for natural reasons.

The class @code{Service_Pack_X_Y} is defined according to the service
pack version. For example, at the time of writing,
@code{Service_Pack_3_0} is set on an updated Windows XP operating
system.

To allow taking specific actions on different Windows versions, one
of the following hard classes is defined.

@itemize
@item @code{Windows_7}
@item @code{Windows_Server_2008_R2}
@item @code{Windows_Server_2008}
@item @code{Windows_Vista}
@item @code{Windows_Server_2003_R2}
@item @code{Windows_Home_Server}
@item @code{Windows_Server_2003}
@item @code{Windows_XP_Professional_x64_Edition}
@item @code{Windows_XP}
@item @code{Windows_2000}
@end itemize

Note that all defined hard classes for a given system is shown by
running @code{cf-promises -v}.


@node  Notes on windows policies,  , Windows hard classes, Top
@unnumberedsec Notes on windows policies
A potential problem source when writing policies for windows is that
paths to executables often contain spaces. This makes it impossible
for CFEngine to know where the executable ends and the parameters to
it starts. To solve this, we place escaped quotes around the
executable. Windows share paths (double backslashes) also need
escaping.

Additionally, Windows does not support that processes start themselves
in in the background (i.e. fork off a child process in the Unix
world). The result is that CFEngine is always waiting for the commands
to finish execution before checking the next promise. To avoid this,
use the background attribute in the action body-part.

Both these things are demonstrated in the following example.

@verbatim

body common control
{
inputs => { "cfengine_stdlib.cf" };
bundlesequence  => { "main" };
}

bundle agent main
{
commands:

"\"C:\Program Files\Some Dir\program name.bat\" --silent --batch"
  action => in_shell_bg;

"\"\\\\computer\share path\my program.exe\" /some args";
}

@end verbatim

Finally, one should note that Windows lacks support for certain
features that are utilised in Unix versions of CFEngine. These include
symbolic links, file groups, user and group identifiers.

Thus, the parts of promises containing these features will be
ignored. For example, the @code{getgid()} function does not return
anything on Windows. The
@uref{http://cfengine.com/manuals/cf3-Reference.html,CFEngine
reference manual} documents exactly which promises are ignored and
not.  Also, @code{cf-agent.exe} from CFEngine Enterprise prints warning messages
on ignored attributes when run in verbose mode (@code{cf-agent.exe -Kv}).


@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https:// 
ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google- 
analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye

