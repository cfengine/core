
In CFEngine 3 we have

@smallexample
 processes
 commands
@end smallexample

@noindent so that there is a clean separation between detection (promises
about the process table) and certain repairs (promises to execute
commands that start processes). Let's see why.

Executions are about jobs, services, scripts etc. They are properties
of an executable file. The referring `promiser' is a file
object. On the other hand a process is a property of a "process
identifier" which is a kernel instantiation, a quite different object
altogether. So it makes sense to say that

@itemize
@item
A "PID" (which is not an executable) promises to be reminded of a signal, e.g.
@smallexample
    kill signal pid
@end smallexample
@item
An "command" promises to start or stop itself with a parameterized specification.
@smallexample
    exec command argument1 argument2 ...
@end smallexample
@end itemize

Neither the file nor the pid necessarily promise to respond to these activations, but they
are nonetheless physically meaningful phenomena or attributes associated with these objects.

@itemize
@item 
Executable files do not listen for signals as they have no active state.
@item 
PIDs do not run themselves or stop themselves with new arguments, but they can use signals as they are running.
@end itemize

Executions lead to processes for the duration of their lifetime, so these two issues
are related, although the promises themselves are not. 

@*
@noindent @b{Services verus processes}:
@*

A service is an abstraction that requires processes to run and files
to be configured. It makes a lot of sense to wrap services in modular
bundles. Starting and stopping a service can be handled in at least two ways.
Take the web service as an example.

We can start the service by promising an execution of a daemon (e.g. @code{httpd}).
Normally this execution does not terminate without intervention. We can
terminate it in one of two ways:

@itemize
@item
Using a process signal, by promising a signal to processes matching a certain pid search
@item
Using an execution of a termination command, e.g. @samp{/etc/init.d/apache stop}.
@end itemize

The first case makes sense if we need to qualify the termination by
searching for the processes. The processes section of a CFEngine 3
policy includes a control promise to search for matching processes.
If matches are found, signals can be sent to precisely each specific process.

Classes can also be defined, in principle triggering an execution of
the stop script, but then the class refers only to the presence of
matching pids, not to the individual pids concerned.  So it becomes
the responsibility of the execution to locate and interact with the
pids necessary.

@*
@noindent @b{Want it running?}:
@*

How do we say simply that we want a service running?
In the agent control promises, we could check each service
individually.
@verbatim
bundlesequence => { Update, Service("apache"), Service("nfsd") };
@end verbatim
or
@verbatim
bundlesequence => { Update, @(globals.all_services)  };
@end verbatim

The bundle for this can look like this:
@verbatim
bundle agent Service(service")
{
processes:

  "$(service)" 

      process_count => up("$(service)");

commands:

   "$daemons[$(service)]"  

      ifvarclass => "$(service)_up",
      args       => "$args[$(service)]";

}
@end verbatim

An alternative would be self-contained:

@verbatim
bundle agent Service
{
vars:

  "service" slist => { "apache", "nfsd", "bind" };

processes:

  "$(service)" 

      process_count => up("$(service)");

commands:

   "$daemons[$(service)]"  

      ifvarclass => "$(service)_up",
      args       => "$args[$(service)]";

}

######################
# Parameterized body
######################

body process_count up("$(s)")

{
match_range => "[0,10]";
out_of_range_define => "$(s)_up";
}

@end verbatim
