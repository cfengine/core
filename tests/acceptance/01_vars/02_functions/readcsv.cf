# test readcsv()

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence => { default("$(this.promise_filename)") };
      version => "1.0";
}

bundle agent test
{
  vars:
      "c" data => readcsv("$(this.promise_filename).csv");
      "cs" string => format("%S", c);
}

bundle agent check
{
  vars:
      "expected" string => '[["emptydata","99","xyz","/default/default/methods/\'any\'[0]","p","[]","[]","default","ny","default.cf.sub"],["emptydata","99","def","/default/default/methods/\'any\'/default/test_run/methods/\'any\'[0]","q","[]","[]","default","ny","default.cf.sub"],["emptydata","99","abc","/default/default/methods/\'any\'/default/test_run/methods/\'any\'[0]","r","[]","[]","default","ny","default.cf.sub"],["emptydata","99","pqr","/default/default/methods/\'any\'/default/test_run/methods/\'any\'[0]","s","[]","[]","default","ny","default.cf.sub"],["emptydata","110","???","[\\"Proposed executable file \'/TEST.cfengine.willfail\' doesn\'t exist\\",\\"\'/TEST.cfengine.willfail\' promises to be executable but isn\'t\\"]","default"]]';

  methods:
      "check"  usebundle => dcs_check_strcmp("$(test.cs)",
                                             $(expected),
                                             "$(this.promise_filename)",
                                             "no");
}
