#######################################################
#
# Test maparray()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
}

#######################################################

bundle agent test
{
  vars:
      "load1" data => parsejson('[ 1, 2, 3]');
      "load2" slist => { "eleme\"nt1", "element2", "element3" };
      "load3" data => parsejson('{ "x\\"x": "y\\"y" }');
      "load4" data => parsejson('[]');
      "load5[mykey]" slist => { "myvalue" };
      "load5[anotherkey]" string => "anothervalue";
      "load5[lastkey!]" slist => { "o\"ne", "two", "three" };
      "load6" data => parsejson('{ "a": { "b": "c" } }');

      "static[x]" string => "xvalue";
      "static[x\"x]" string => "xxvalue";
      "static[0]" string => "0value";
      "static[1]" string => "1value";
      "static[2]" string => "2value";
      "static[lastkey!]" string => "lastvalue";
      "static[anotherkey]" string => "anothervalue";
      "static[mykey]" string => "myvalue";
      "static[a]" string => "avalue";

      "spec1" string => "key = $(this.k)";
      "spec2" string => "key = $(this.k), value = ${this.v}";
      "spec3" string => "key = $(this.k), key2 = $(this.k[1]), value = ${this.v}";
      "spec4" string => "xvalue should be $(static[$(this.k)])";

      "jsonspec1" string => '{ "key": "$(this.k)", "value": "$(this.v)"';
      "jsonspec2" string => '{ "key": "$(this.k)", "value": "$(this.v)" }';
      "jsonspec3" string => '[ "$(this.k)", "$(this.v)" ]';
      "jsonspec4" string => '{ "key": "$(this.k)", "key2": "$(this.k[1])", "value": "$(this.v)" }';

      "X" slist => { "1", "2", "3", "4", "5", "6" };
      "Y" slist => { "1", "2", "3", "4" };

      "maparray_$(X)_$(Y)" slist => sort(maparray("$(spec$(Y))", "load$(X)"));
      "bad2" slist => maparray("", missingvar);

      "justastring" string => "me";
      "bad4" slist => maparray("", justastring);
}

#######################################################

bundle agent check
{
  methods:
      "check"  usebundle => dcs_check_state(test,
                                           "$(this.promise_filename).expected.json",
                                           $(this.promise_filename));
}
