
Packages promises can be very simple if the package manager is of the
smart variety that handles details for you. If you need to specify
architecture and version numbers of packages, this adds some
complexity, but the options are flexible and designed for maximal
adaptability.

@noindent @b{Patching}

Some package systems also support the idea of `patches'. These might
be formally different objects to packages. A patch might contain
material for several packages and be numbered differently.
When you select patching-policy the package name (promiser) can be
a regular expression that will match possible patch names, otherwise
identifying specific patches can be cumbersome.

Note that patching is a subtle business. There is no simple way using
the patch settings to install `all new system patches'. Here's why:

If we specify the name of a patch, then CFEngine will try to see if it
exists and/or is installed. If it exists in the pending list, it will
be installed.  If it exists in the installed list it will not be
installed. Now consider the pattern @samp{.*}. This will match any
installed package, so CFEngine will assume the relevant patch has been
installed already.  On the other hand, the pattern @samp{no match}
will not match an installed patch, but it will not match a named patch
either.

Some systems provide a command to do this, which can be specified
without specific patch arguments. If so, that command can be called
periodically under @code{commands}. The main purposes of patching
body items are:

@itemize
@item To install specific named patches in a controlled manner.
@item To generate reports of available and installed patches during
system reporting.
@end itemize

@noindent @b{Installers without package/patch arguments}

CFEngine supports the syntax @samp{$} at the end of a command to mean
that no package name arguments should be used or appended after the
dollar.  This is because some commands require a list of packages,
while others require an empty list. The default behaviour is to try to
append the name of one or more packages to the command, depending on 
whether the policy is for individual or bulk installation.

@noindent @b{Default package method}

As of core 3.3.0, if no @code{package_method} is defined, CFEngine will
look for a method called @samp{generic}. Such a method is defined in
the standard library for supported operating systems.

