#######################################################
#
# Test the ^meta module protocol extension
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle common init
{
  vars:
      "script_name" string => "$(this.promise_filename).script";

}

#######################################################

bundle agent test
{
  commands:
      "$(init.script_name)" module => "true";

}

#######################################################

bundle agent check
{
  vars:
      "xyzvars" slist => variablesmatching("default:xyz.*");

      "list0" slist => {"abc", "def", "ghi"};
      "list1" slist => {"{{abc}}", "  ' def}", "ghi'''"};
      "list2" slist => {'{{a,bc}}', '  " de,f}', 'gh,,i"""'};
      "list3" slist => {"{{a'bc',,}}", '  ",, d"ef}', "ghi,},'''"};

      "actual0" string => join(":", "list0");
      "actual1" string => join(":", "list1");
      "actual2" string => join(":", "list2");
      "actual3" string => join(":", "list3");

      "joined0" string => join(":", "xyz.mylist");
      "joined1" string => join(":", "xyz.myalist");
      "joined2" string => join(":", "xyz.myblist");
      "joined3" string => join(":", "xyz.myclist");

      "tags0" slist => getvariablemetatags("xyz.mylist");
      "tags1" slist => getvariablemetatags("xyz.myalist");
      "tags2" slist => getvariablemetatags("xyz.myblist");
      "tags3" slist => getclassmetatags("mycclass");

      "jtags0" string => join(",", "tags0");
      "jtags1" string => join(",", "tags1");
      "jtags2" string => join(",", "tags2");
      "jtags3" string => join(",", "tags3");

      "etags0" string => "xyz,abc=def,,??what is this??,source=module";
      "etags1" string => "xyz,abc=def,,??what is this??,source=module";
      "etags2" string => "1,2,3,source=module";
      "etags3" string => "a,b,c,source=module";

  classes:

    any::
      "var0ok" expression => strcmp("${this.joined0}" , "${this.actual0}");
      "var1ok" expression => strcmp("${this.joined1}" , "${this.actual1}");
      "var2ok" expression => strcmp("${this.joined2}" , "${this.actual2}");
      "var3ok" expression => strcmp("${this.joined3}" , "${this.actual3}");
      "var4ok" expression => strcmp("hello there" , "${xyz.myvar}");

      "tags0ok" expression => strcmp($(jtags0), $(etags0));
      "tags1ok" expression => strcmp($(jtags1), $(etags1));
      "tags2ok" expression => strcmp($(jtags2), $(etags2));
      "tags3ok" expression => strcmp($(jtags3), $(etags3));

      "ok" and => { "myclass", "var0ok", "var1ok", "var2ok", "var3ok", "var4ok",
                    "tags0ok", "tags1ok", "tags2ok", "tags3ok", };

  reports:
    DEBUG::
      "xyzvars = $(xyzvars)";

      "tags0ok => strcmp('$(jtags0)', '$(etags0)')" ifvarclass => "tags0ok";
      "tags1ok => strcmp('$(jtags1)', '$(etags1)')" ifvarclass => "tags1ok";
      "tags2ok => strcmp('$(jtags2)', '$(etags2)')" ifvarclass => "tags2ok";
      "tags3ok => strcmp('$(jtags3)', '$(etags3)')" ifvarclass => "tags3ok";

      "tags0 NOT ok => strcmp('$(jtags0)', '$(etags0)')" ifvarclass => "!tags0ok";
      "tags1 NOT ok => strcmp('$(jtags1)', '$(etags1)')" ifvarclass => "!tags1ok";
      "tags2 NOT ok => strcmp('$(jtags2)', '$(etags2)')" ifvarclass => "!tags2ok";
      "tags3 NOT ok => strcmp('$(jtags3)', '$(etags3)')" ifvarclass => "!tags3ok";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

### PROJECT_ID: core
### CATEGORY_ID: 26
