#+Title: Masterfiles Stage

This script is designed to run on the Policy Server and safely deploy
policy from upstream locations to a directory on the Policy Server for
distribution to clients.

[[file:images/basic_cfengine_architecture.png]]

As it is recommended to store and manage CFEngine policy in a version
control system like git or subversion, the typical and recommended
"upstream" source is a version control repository.

Deployment is done in a safe manner by first preparing masterfiles in
a staging area before deploying the policy to the directory where
clients [[https://docs.cfengine.com/latest/reference-promise-types-access.html#top][have access]] and expect it to be distributed from.

"Staging" is the process of preparing a temporary location with the
content of masterfiles sourced from an upstream location. Once the
temporary location has been updated it is validated and prepared for
deployment through various means.

The following are the common minimal staging actions:
  - =cf-promises= is used to validate the policy
    - This is done to try and prevent broken policy from being made
      available to remote agents
  - apply restrictive permissions
    - This is done because version control systems are notoriously
      poor at preserving correct and restrictive permissions.

Once the policy has been successfully staged the policy is deployed to
the final location for distribution to remote agents. In the most
simple environments this will be =$(sys.masterdir)= (typically
=/var/cfengine/masterfiles=) on the policy server.


* Current Features
:PROPERTIES:
:ID:       328afa2e-3e6d-4e87-87bc-0db71b009763
:END:
- Supported upstreams
  - =VCS_TYPE="GIT"=
  - =VCS_TYPE="GIT_CFBS"= :: Like GIT, but instead of deploying policy from the root of a git repo directly, cfbs is used to first build the policy.
  - =VCS_TYPE="GIT_POLICY_CHANNELS"=
  - =VCS_TYPE="SVN"=

- Git submodules supported
  Note however that submodules can be "tricky".
  Because of the way this script currently handles the repo, changes in url or branch of a submodule are handled well.
  When changing url/branch in your working directory you may notice that the submodule is not updated properly. The following procedure will fix the situation:

```
  git submodule deinit <name_of_submodule>
  git rm -rf <name_of_submodule>
  rm -rf .git/modules/<name_of_submodule>
  git submodule add --force [-b <branch>] <submodule_url> <name_of_submodule>
```

* Dependencies
:PROPERTIES:
:ID:       b04a05f5-f84f-4c38-aed0-837e2ca6c10c
:END:
This script has the following dependencies
- bash
- rsync (SVN only)
- md5sum (SVN only)
- git|svn

git version =1.7.1= was used for testing =GIT= and =GIT_POLICY_CHANNELS=;
earlier versions of git may or may not work.

* Installation
:PROPERTIES:
:ID:       2aeaaa9b-1229-4c14-b130-6d86e370de42
:END:
Installation simply consists of saving =masterfiles-stage.sh= and its supporting
=common.sh=, =ssh-wrapper.sh= and =git-askpass.sh= scripts to the same directory on your policy
server, making sure that=masterfiles-stage.sh= is executable and configuring the default
parameter set.

*Note:* These instructions install the tooling into the same location where they
are pre-installed when using CFEngine Enterprise.

#+Caption: Install masterfiles-stage
#+BEGIN_SRC sh :exports code
  curl --silent https://raw.githubusercontent.com/cfengine/core/master/contrib/masterfiles-stage/install-masterfiles-stage.sh --remote-name
  chmod +x install-masterfiles-stage.sh
  # adjust the shebang on the first line of the script if `/usr/bin/env` isn't the correct path to `env`.
  ./install-masterfiles-stage.sh
#+END_SRC

#+Name: masterfiles-stage.sh
#+BEGIN_SRC sh :tangle ./install-masterfiles-stage.sh :exports none
  #!/bin/env bash
  SRC_DIR="https://raw.githubusercontent.com/cfengine/core/master/contrib/masterfiles-stage"
  DC_SCRIPTS_DIR=$(/var/cfengine/bin/cf-promises --file update.cf --show-vars=dc_scripts | awk '/update_def\.dc_scripts/ {print $2}')
  DEFAULT_PARAMS_FILE="/opt/cfengine/dc-scripts/params.sh"
  mkdir -p ${DC_SCRIPTS_DIR}
  mkdir -p $(dirname ${DEFAULT_PARAMS_FILE})
  curl --silent ${SRC_DIR}/masterfiles-stage.sh --output ${DC_SCRIPTS_DIR}/masterfiles-stage.sh
  curl --silent ${SRC_DIR}/common.sh --output ${DC_SCRIPTS_DIR}/common.sh
  curl --silent ${SRC_DIR}/example_params/PARAMS_example_git_branch.sh --output ${DEFAULT_PARAMS_FILE}
  chown root:root ${DC_SCRIPTS_DIR}/masterfiles-stage.sh ${DC_SCRIPTS_DIR}/common.sh ${DEFAULT_PARAMS_FILE}
  chmod 500 ${DC_SCRIPTS_DIR}/masterfiles-stage.sh
  chmod 400 ${DC_SCRIPTS_DIR}/common.sh
  chmod 600 ${DEFAULT_PARAMS_FILE}
  echo "Now, edit ${DEFAULT_PARAMS_FILE} to conigure your upstream repository."
  echo "Then, run '${DC_SCRIPTS_DIR}/masterfiles-stage.sh --DEBUG' to test deployment"
#+END_SRC

Next, configure the default parameter set (=DEFAULT_PARAMS_FILE=).

*** Troubleshooting

You may experience issues trying to use the old versions of various dependencies. Try these solutions to common issues.

**** EL6

#+CAPTION: fatal: HTTP request failed
#+begin_example
  [root@hub vagrant]# ${DC_SCRIPTS_DIR}/masterfiles-stage.sh  --DEBUG
  Option Deploy Dir: /var/cfengine/masterfiles
  Option Params File: /opt/cfengine/dc-scripts/params.sh
  Initialized empty Git repository in /opt/cfengine/https___gitlab.com_nickanderson_masterfiles-vcs/
  error:  while accessing https://gitlab.com/nickanderson/masterfiles-vcs/info/refs

  fatal: HTTP request failed
  /var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh: Failed: git clone --mirror 'https://gitlab.com/nickanderson/masterfiles-vcs' '/opt/cfengine/https___gitlab.com_nickanderson_masterfiles-vcs'
#+end_example

#+CAPTION: Installing a modern version of git on EL6
#+BEGIN_SRC
  yum install -y http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm
  yum install -y git
#+END_SRC

#+CAPTION: SSL connect error
#+begin_example
  [root@hub ~]# ${DC_SCRIPTS_DIR}/masterfiles-stage.sh  --DEBUG
  Option Deploy Dir: /var/cfengine/masterfiles
  Option Params File: /opt/cfengine/dc-scripts/params.sh
  Cloning into bare repository '/opt/cfengine/https___gitlab.com_nickanderson_masterfiles-vcs'...
  fatal: unable to access 'https://gitlab.com/nickanderson/masterfiles-vcs/': SSL connect error
  /var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh: Failed: git clone --mirror 'https://gitlab.com/nickanderson/masterfiles-vcs' '/opt/cfengine/https___gitlab.com_nickanderson_masterfiles-vcs'
#+end_example

#+CAPTION: Update nss, curl, and libcurl to bypass SSL connect error
#+BEGIN_SRC sh
  yum update -y nss curl libcurl
#+END_SRC

* Configuration
:PROPERTIES:
:ID:       29bd6403-b885-4867-8b4e-a6605bf0dfd1
:END:

The =masterfiles-stage.sh= script takes options in order to specify the
directory where the masterfiles should be deployed after staging, as well as
the file that contains the parameters that should be used in order to interface
with the given upstream source implementation (git url, branch etc ..)
Run masterfiles-stage.sh --help to see exact option flags.

- =PARAMS= is the absolute path to the location of the
  parameter set that describes information needed by the selected
  staging method (currently referred to as =VCS_TYPE=). The format of
  the file is a simple KEY="VALUE". It is sourced by the
  =masterfiles-stage.sh= script. Each staging method or =VCS_TYPE=
  defined may define its own parameters. It is recommended that the
  parameters defined by the =VCS_TYPE= be prefixed with the =VCS_TYPE=
  so as not to conflict with other staging methods.

  Example PARAMS files can be found [[file:example_params/][here]].

- =MASTERDIR= is the abolute path to the location that you
  want masterfiles to be deployed to after successful staging.
  The default is =/var/cfengine/masterfiles= but please note that
  you can override this value either with an option on the command line,
  or by specifying the value of =MASTERDIR= inside of your =PARAMS= file.
  (The value specified in =PARAMS=, if there is one, will take precedence
  over an option specified on the command line.)

*** Reserved Parameters
:PROPERTIES:
:ID:       210cf03a-c8b3-47f3-916f-828c958bde5b
:END:
The following parameters are in use, be sure to avoid their collision
when developing new staging methods.

- =VCS_TYPE= :: The staging method to use
  - Currently supported: (=GIT=|=GIT_POLICY_CHANNELS=|=SVN=)

- =GIT_URL= :: The URL to the git repository
  - Example values:
    - =https://gitlab.com/nickanderson/masterfiles_demo_3.7.git=
    - =git@gitlab.com:nickanderson/masterfiles_demo_3.7.git=

- =GIT_REFSPEC= :: The git refspec to checkout.
  It can be a branch name, a tag name, a commit hash or a partial hash.
  - Example values:
    - =master=
    - =my_tag=
    - =88335d36b48c8808b12b48667a463182dc8d0338=
    - =cb375d0f=

- =PKEY= :: Fully qualified path to passphraseless private SSH Key used for authorization.
  This file should be owned by root and have only user read/write permissions.
  - Example values:
    - =/opt/cfengine/userworkdir/admin/.ssh/id_rsa.pvt=

- =GIT_USERNAME= :: Git username used for authorization.

- =GIT_PASSWORD= :: Git password or token used for authorization.

- =SCRIPT_DIR= :: Directory contianing supporting scripts.

- =dir_to_hold_mirror= :: The directory where the git mirror repo will
  be created for =GIT_POLICY_CHANNELS=.  (With =VCS_TYPE=GIT=, the repo
  is placed alongside of =ROOT=.)
  - Example value:
    - =/opt/cfengine=

- =channel_config= - a =bash= array containing configuration data
  for multiple policy channels.  Effectively, it contains multiple
  values for both =MASTERDIR= and =GIT_BRANCH=.
  - Example value assignment:
#+BEGIN_EXAMPLE
  chan_deploy="/var/cfengine/policy_channels"
  # chan_deploy is not otherwise used, but can be used to reduce the
  # verbosity of the chan_config value assignments.

  # channel_config is first set as an empty array, then appended to.
  # The format is, after the initial empty array value is set:
  # channel_config+=( "/absolute/path/to/deploy/to"  "git_reference_specifier" )
  channel_config=()
  channel_config+=( "$chan_deploy/channel_1"    "my_branch_name" )
  channel_config+=( "$chan_deploy/channel_2"    "my_tag_name" )
  channel_config+=( "/var/cfengine/masterfiles" "362e11b705" )
  # Note that channel_config must have an even number of elements
  # and that absolute pathnames must be used.
#+END_EXAMPLE

- =SVN_URL= :: The URL to the svn repository

- =SVN_BRANCH= :: The svn branch to checkout

- =ROOT= :: Location where policy is staged.
  - =/opt/cfengine/masterfiles_staging=

The following attributes are used by CFEngine Enterprise and
their usage for other means should be avoided to avoid collisions.

- =GIT_SSH= :: Helper script to access SSH Git repositories (uses =PKEY=).

- =GIT_ASKPASS= :: Helper script to provide HTTPS authorization details to Git
  (uses =GIT_USERNAME= and =GIT_PASSWORD=).

*** Special Note
:PROPERTIES:
:ID:       a1306b8d-35b3-4fc3-9376-9f4f07f2fed7
:END:
The executing user may require additional configuration in order to
successfully authenticate. The specifics depend on the specifics of
your upstream repository. For example, an upstream repository over
http or https that allows anonymous access may need no additional
configuration, but an upstream that uses ssh keys for authentication
may require trust establishment (accepting the host key fingerprint),
and the presence of an ssh key for authentication. Depending on the
security requirements of your organization, you may use a
passphraseless key, or you may use something like =ssh-agent=.

* Example Usage
:PROPERTIES:
:ID:       67b5ead8-5bdf-47d9-a26a-70ad95b742d5
:END:

The script can be invoked manually:

#+CAPTION: Example manually executing masterfiles-stage
#+begin_example
  [root@hub ~]# ${DC_SCRIPTS_DIR}/masterfiles-stage.sh --DEBUG
  Option Deploy Dir: /var/cfengine/masterfiles
  Option Params File: /opt/cfengine/dc-scripts/params.sh
  Cloning into bare repository '/opt/cfengine/https___gitlab.com_nickanderson_masterfiles-vcs'...
  warning: redirecting to https://gitlab.com/nickanderson/masterfiles-vcs.git/
  remote: Enumerating objects: 135, done.
  remote: Counting objects: 100% (135/135), done.
  remote: Compressing objects: 100% (116/116), done.
  remote: Total 135 (delta 18), reused 123 (delta 13), pack-reused 0
  Receiving objects: 100% (135/135), 201.34 KiB | 1.94 MiB/s, done.
  Resolving deltas: 100% (18/18), done.
  Successfully deployed '3.15.1' from 'https://gitlab.com/nickanderson/masterfiles-vcs' to '/var/cfengine/masterfiles' on Wed Apr 15 19:52:54 UTC 2020
#+end_example

Or execution can be automated with CFEngine.

To enable automatic deployment define =cfengine_internal_masterfiles_update= and ensure that =cfe_internal_update_from_repository= is run as part of the update policy. Note, =cfe_internal_update_from_repository= is run automatically when =cfengine_internal_masterfiles_update= is defined AND CFEngine Enterprise binaries are in use using the stock update policy.

#+CAPTION: Example augments (def.json) enabling automatic deployment and adding update from repository to end of update bundlesequence
#+BEGIN_SRC json
{

  "classes": {
    "cfengine_internal_masterfiles_update": [ "am_policy_hub::" ]
  },
  "vars": {
    "control_common_update_bundlesequence_end": [ "cfe_internal_update_from_repository" ]
  }
}
#+END_SRC

Inform output from the update policy will indicate execution result:

#+CAPTION: Example output from successful execution
#+begin_example
[root@hub ~]# cf-agent -KIf update.cf;
    info: Executing 'no timeout' ... '/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh'
    info: Command related to promiser '/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh' returned code defined as promise kept 0
    info: Completed execution of '/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh'
#+end_example

#+CAPTION: Example output when upstream policy does not validate
#+begin_example
[root@hub ~]# cf-agent -KIf update.cf;
    info: Executing 'no timeout' ... '/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh'
   error: Command related to promiser '/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh' returned code defined as promise failed 1
    info: Completed execution of '/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh'
R: Masterfiles deployment failed, for more info see '/var/cfengine/outputs/dc-scripts.log'
   error: Method 'cfe_internal_masterfiles_stage' failed in some repairs
[root@hub ~]# tail /var/cfengine/outputs/dc-scripts.log
From https://gitlab.com/nickanderson/masterfiles-vcs
   7b35681..01b62cf  3.15.x     -> 3.15.x
/var/cfengine/tmp.0B5Bz0DRD7/promises.cf:6:6: error: syntax error
ERROR
     ^
/var/cfengine/tmp.0B5Bz0DRD7/promises.cf:6:6: error: Expected 'bundle' or 'body' keyword, wrong input 'ERROR'
ERROR
     ^
   error: There are syntax errors in policy files
/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh: Update policy staged in /var/cfengine/tmp.0B5Bz0DRD7 could not be validated, aborting.
#+end_example

Alternatively, write custom policy to trigger deployment:

#+CAPTION: Custom policy to drive automatic deployment
#+BEGIN_SRC cfengine3
  bundle agent stage_masterfiles
  {
    vars:
        policy_server::

        # cf-promises --file update.cf --show-vars=dc_scripts | awk '/update_def\.dc_scripts/ {print $2}')
        "deploy_script"
          string => "/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh";

        "masterfiles_deploy_destination"
          string => "/var/cfengine/masterfiles";

    classes:
      "automatic_policy_deployment_allowed"
        expression => "any"; # or perhaps Tuesday.Morning

    commands:
        policy_server.automatic_policy_deployment_allowed::
        # masterfiles-stage.sh DESTINATION PARAMS
        "$(deploy_script)"
          args => "-d '$(masterfiles_deploy_destination)' -p '/var/cfengine/deploy_params/PARAMS_masterfiles.sh'",
          comment => "Masterfiles should be deployed to $(masterfiles_deploy_destination) using ";
  }
#+END_SRC

If the params file is placed in the default location
=/opt/cfengine/dc-scripts/params.sh=, and if the value of =MASTERDIR= is
specified in the params file, the CFEngine code can be as simple as:

#+CAPTION: Simplest execution of masterfiles-stage leveraging defaults
#+BEGIN_SRC cfengine3
  bundle agent stage_masterfiles
  {
    commands:
      policy_server::
        # cf-promises --file update.cf --show-vars=dc_scripts | awk '/update_def\.dc_scripts/ {print $2}')
        "/var/cfengine/httpd/htdocs/api/dc-scripts/masterfiles-stage.sh";
  }
#+END_SRC


* Phased Rollout with Multiple Staged Masterfiles
:PROPERTIES:
:ID:       bbaa7eed-e400-4f71-a7c5-283ed5e2deca
:END:

The =masterfiles-stage.sh= script can support an implementation for
phased rollout. Phased Rollout is the process of releasing a *policy*
change to a population in a controlled manner.
(=GIT_POLICY_CHANNELS= is one such implementation.)
