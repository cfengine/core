#######################################################
#
# Test hash()
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };   
  version => "1.0";
}

bundle common g
{
vars:
	"dummy" string => "dummy";
}

#######################################################

bundle agent init
{
vars:
	"dummy" string => "dummy";
}

#######################################################

bundle agent test
{
vars:
    # XXX # What do we do about testing the crypt hash-type?
    #
    "null_test" string => "";
    "null_md5" string => hash("$(null_test)", "md5");
    "null_sha1" string => hash("$(null_test)", "sha1");
    "null_sha256" string => hash("$(null_test)", "sha256");
    "null_sha384" string => hash("$(null_test)", "sha384");
    "null_sha512" string => hash("$(null_test)", "sha512");

    # Cfengine does not expand most \ characters, so use Perl :-)
    "easy_test" string => execresult("/usr/bin/perl -e 'print \"test\n\";'", "noshell");
    "easy_md5" string => hash("$(easy_test)", "md5");
    "easy_sha1" string => hash("$(easy_test)", "sha1");
    "easy_sha256" string => hash("$(easy_test)", "sha256");
    "easy_sha384" string => hash("$(easy_test)", "sha384");
    "easy_sha512" string => hash("$(easy_test)", "sha512");

    "hard_test" string => execresult("/usr/bin/perl -e 'print \"This is a test of \0\1\2\n the hash function!\";'", "noshell");
    "hard_md5" string => hash("$(hard_test)", "md5");
    "hard_sha1" string => hash("$(hard_test)", "sha1");
    "hard_sha256" string => hash("$(hard_test)", "sha256");
    "hard_sha384" string => hash("$(hard_test)", "sha384");
    "hard_sha512" string => hash("$(hard_test)", "sha512");
}

#######################################################

bundle agent check
{
vars:
    "null_md5" string => "d41d8cd98f00b204e9800998ecf8427e";
    "null_sha1" string => "da39a3ee5e6b4b0d3255bfef95601890afd80709";
    "null_sha256" string => "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    "null_sha384" string => "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b";
    "null_sha512" string => "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";

    "easy_md5" string => "d8e8fca2dc0f896fd7cb4cb0031ba249";
    "easy_sha1" string => "4e1243bd22c66e76c2ba9eddc1f91394e57f9f83";
    "easy_sha256" string => "f2ca1bb6c7e907d06dafe4687e579fce76b37e4e93b7605022da52e6ccc26fd2";
    "easy_sha384" string => "109bb6b5b6d5547c1ce03c7a8bd7d8f80c1cb0957f50c4f7fda04692079917e4f9cad52b878f3d8234e1a170b154b72d";
    "easy_sha512" string => "0e3e75234abc68f4378a86b3f4b32a198ba301845b0cd6e50106e874345700cc6663a86c1ea125dc5e92be17c98f9a0f85ca9d5f595db2012f7cc3571945c123";

    "hard_md5" string => "f0eb26e3a7349f122f3bb4cfeebff0e1";
    "hard_sha1" string => "8c9e617bdd2b75ceb4ce628e3cc05a5889f8439e";
    "hard_sha256" string => "f2e1a7b2f22aae02c824d66654969e7c2aa38c7874993de39efb6340ca6c783c";
    "hard_sha384" string => "581c5043ebc733f63c16f4b6eaed502151b07c41d4ffb9cf2f2eac0f901028213e8f72aadea6d839e61faec0b82d4248";
    "hard_sha512" string => "736f516519206974ed6d8752d4146b3242c039aaa7c8768eaf6b0345ce8f46727ea91a9f92090141c2fb6457ddc623c1aed9602c24f50a6a364ba98ef58177bf";

classes:
	"ok_null" and => {
		    strcmp("$(test.null_md5)", "$(null_md5)"),
		    strcmp("$(test.null_sha1)", "$(null_sha1)"),
		    strcmp("$(test.null_sha256)", "$(null_sha256)"),
		    strcmp("$(test.null_sha384)", "$(null_sha384)"),
		    strcmp("$(test.null_sha512)", "$(null_sha512)"),
		    };

	"ok_easy" and => {
		    strcmp("$(test.easy_md5)", "$(easy_md5)"),
		    strcmp("$(test.easy_sha1)", "$(easy_sha1)"),
		    strcmp("$(test.easy_sha256)", "$(easy_sha256)"),
		    strcmp("$(test.easy_sha384)", "$(easy_sha384)"),
		    strcmp("$(test.easy_sha512)", "$(easy_sha512)"),
		    };

	"ok_hard" and => {
		    strcmp("$(test.hard_md5)", "$(hard_md5)"),
		    strcmp("$(test.hard_sha1)", "$(hard_sha1)"),
		    strcmp("$(test.hard_sha256)", "$(hard_sha256)"),
		    strcmp("$(test.hard_sha384)", "$(hard_sha384)"),
		    strcmp("$(test.hard_sha512)", "$(hard_sha512)"),
		    };

	"ok" and => { "ok_null", "ok_easy", "ok_hard" };

reports:
    DEBUG.ok_null::
	"NULL STRING TESTS PASS";
    DEBUG.!ok_null::
	"NULL STRING TESTS FAIL";
    DEBUG::
	"null_md5: $(test.null_md5) == $(null_md5)";
	"null_sha1: $(test.null_sha1) == $(null_sha1)";
	"null_sha256: $(test.null_sha256) == $(null_sha256)";
	"null_sha384: $(test.null_sha384) == $(null_sha384)";
	"null_sha512: $(test.null_sha512) == $(null_sha512)";

    DEBUG.ok_easy::
	"EASY STRING TESTS PASS";
    DEBUG.!ok_easy::
	"EASY STRING TESTS FAIL";
    DEBUG::
	"Hashing >$(test.easy_test)<";
	"easy_md5: $(test.easy_md5) == $(easy_md5)";
	"easy_sha1: $(test.easy_sha1) == $(easy_sha1)";
	"easy_sha256: $(test.easy_sha256) == $(easy_sha256)";
	"easy_sha384: $(test.easy_sha384) == $(easy_sha384)";
	"easy_sha512: $(test.easy_sha512) == $(easy_sha512)";

    DEBUG.ok_hard::
	"HARD STRING TESTS PASS";
    DEBUG.!ok_hard::
	"HARD STRING TESTS FAIL";
    DEBUG::
	"Hashing >$(test.hard_test)<";
	"hard_md5: $(test.hard_md5) == $(hard_md5)";
	"hard_sha1: $(test.hard_sha1) == $(hard_sha1)";
	"hard_sha256: $(test.hard_sha256) == $(hard_sha256)";
	"hard_sha384: $(test.hard_sha384) == $(hard_sha384)";
	"hard_sha512: $(test.hard_sha512) == $(hard_sha512)";
    ok::
	"$(this.promise_filename) Pass";

    !ok::
	"$(this.promise_filename) FAIL";
}

#######################################################

bundle agent fini
{
vars:
	"dummy" string => "dummy";
}
