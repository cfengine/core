##############################################################################
#
# Test that agent can override the immutable bit when using edit_xml attribute
#
##############################################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

bundle agent global
{
  vars:
    "testfile"
      string => "/tmp/06_immutable.txt";
}

body fsattrs set_immutable
{
  immutable => "true";
}

bundle agent init
{
  files:
    "$(global.testfile)"
      content => '<foo>I\'m immutable</foo>';

  commands:
    "chattr +i $(global.testfile)"
      contain => in_shell;
}

bundle edit_xml edit_foo
{
  set_text:
    "But agent can override"
      select_xpath => "/foo";
}

bundle agent test
{
  meta:
    "description" -> { "CFE-1840", "ENT-10961" }
      string => "Test that agent can override the immutable bit on a file while using the edit_xml attribute";

    "test_skip_unsupported"
      string => "hpux|aix|solaris|windows";

  files:
    "$(global.testfile)"
      fsattrs => set_immutable,
      edit_xml => edit_foo;
}

bundle agent check
{
  vars:
    "expected"
      string => '<?xml version="1.0"?>$(const.n)<foo>But agent can override</foo>$(const.n)';
    "actual"
      string => readfile("$(global.testfile)");

  classes:
    "ok"
      expression => strcmp("$(actual)", "$(expected)");

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    any::
      "Expected: '$(expected)', actual: '$(actual)'";
}

bundle agent destroy
{
  commands:
    "chattr -i $(global.testfile)"
      contain => in_shell,
      handle => "is mutable";

  files:
    "$(global.testfile)"
      delete => tidy,
      depends_on => { "is mutable" };
    "$(global.testfile).cf-before-edit"
      delete => tidy;
}
