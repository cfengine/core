#######################################################
#
# Test that mergedata works with list iteration
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { test_1, test_2, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
}

#######################################################

bundle agent test_1
{
  vars:
    "hosts"
      meta => { "hosts" },
      data => parsejson('{"10.100.250.11": [ "slot2" ], "10.100.250.10": [ "slot1" ], "111": 222 }');
}

bundle agent test_2
{
  vars:
    "hosts"
      meta => { "hosts" },
      data => parsejson('{"10.100.250.11": [ "cflin111" ], "10.100.250.10": [ "cflin110" ]}');
}

# this bundle is not in the bundlesequence but will be evaluated
bundle agent test_3
{
  vars:
    "hosts"
      meta => { "hosts" },
      data => parsejson('{"10.100.250.12": [ "cflin111" ], "10.100.250.13": [ "cflin110" ]}');
}

bundle common test
{
  vars:
    "variables" slist => variablesmatching(".*", "hosts");
    "sorted_vars" slist => sort("variables", "lex");

    "merged" data => parsejson('{}'),                   policy => "free";
    "merged" data => mergedata(merged, $(sorted_vars)), policy => "free";

    "result" string => format("%S", "merged"), policy => "free";
}


#######################################################

bundle agent check
{
  vars:
    "expected" string => '{"10.100.250.10":["cflin110"],"10.100.250.11":["cflin111"],"10.100.250.12":["cflin111"],"10.100.250.13":["cflin110"],"111":222}';

  classes:
      "ok" expression => strcmp($(test.result), $(check.expected));

  reports:
    DEBUG.inform_mode::
      "Expected: '$(check.expected)'";
      "Result:   '$(test.result)'";
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
