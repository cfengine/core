#+Title: Masterfiles Stage

This script is designed to run on the Policy Server and safely deploy
policy from upstream locations to a directory on the Policy Server for
distribution to clients.

[[file:images/basic_cfengine_architecture.png]]

As it is recommended to store and manage CFEngine policy in a version
control system like git or subversion, the typical and recomended
"upstream" source is a version control repository.

Deployment is done in a safe manner by first "staging" the deployment
and validating the policy before moving it to the distribution
directory."

"Staging" is the process of preparing a temporary location with the
content of masterfiles sourced from an upstream location. Once the
temporary location has been updated it is validated and prepared for
deployment through various means.

The following are the common minimal staging actions:
  - `cf-promises` is used to validate the policy
    - This is done to try and prevent broken policy from being made
      available to remote agents.
  - restrictive permissions are applied

Once the policy has been successfully staged the policy is deployed to
the final location for distribution to remote agents. In the most
simple environments this will be `$(sys.masterdir)` (typically
/var/cfengine/masterfiles) on the policy server.

* Current Features
- Stage masterfiles from a git branch (VCS_TYPE="GIT")
- Stage masterfiles from a git tag or commit
  (VCS_TYPE="GIT_TAG_OR_COMMIT")
- Stage masterfiles from a subversion branch (VCS_TYPE="SVN")

* Configuration

The `masterfiles-stage.sh` script takes two parameters, `MASTERDIR`
and `PARAMS`.

- `MASTERDIR` is the fully qualified path to the location that you
  want masterfiles to be deployed to after successful staging.

- `PARAMS` is the fully qualified path to the location of the
  parameter set that describes information needed by the selected
  staging method (currently reffered to as `VCS_TYPE`). The format of
  the file is a simple KEY="VALUE". It is sourced by the
  `masterfiles-stage.sh` script. Each staging method or `VCS_TYPE`
  defines may define its own parameters. It is reccomended that the
  parameters defined by the `VCS_TYPE` be prefixed with the `VCS_TYPE`
  so as not to conflict with other staging methods.

  Example PARAMS files can be found [[file:example_params/][here]].

*** Reserved Parameters
The following parameters are in use, be sure to avoid their collision
when developing new staging methods.

- VCS_TYPE - The staging method to use
  - Currently supported: (GIT|GIT_TAG_OR_COMMIT|SVN)

- GIT_URL - The URL to the git repository
  - Example values:
    - https://gitlab.com/nickanderson/masterfiles_demo_3.7.git
    - git@gitlab.com:nickanderson/masterfiles_demo_3.7.git

- GIT_BRANCH - The git branch to checkout
  - master

- GIT_TAG_OR_COMMIT
  - Example values:
    - 88335d36b48c8808b12b48667a463182dc8d0338
    - mytag

- SVN_URL - The URL to the svn repository

- SVN_BRANCH - The svn branch to checkout

- ROOT - Location where policy is staged.
  - /opt/cfengine/masterfiles_staging

The following attributes are used by CFEngine Enterprise and currently
have no effect on functionality of `masterfiles-stage.sh`

- GIT_WORKING_BRANCH - Branch for integrating write operations
  - This is used by Design Center in CFEngine Enterprise

- GIT_EMAIL - Email address used to associate commits wit
  - This is used by Design Center in CFEngine Enterprise

- GIT_AUTHOR - The author that should be set when integrating write
  operations (not used by `masterfiles-stage.sh`)
  - This is used by Design Center in CFEngine Enterprise

- PKEY - Private SSH Key used for authrorization when pushing
  integrated write operations
  - This is used by Design Center in CFEngine Enterprise

- SCRIPT_DIR - Directory contianing supporting scripts
  - This is used by Design Center in CFEngine Enterprise


* Example Usage

`masterfiles-stage.sh` can be invoked manually as shown in the
following example.

#+begin_example
  ./masterfiles-stage.sh /tmp/deployed_masterfiles "$(pwd)/example_parmas/PARAMS_example_git_branch.sh"
  tail -n1 /var/cfengine/outputs/dc-scripts.log
  Successfully staged a policy release on Tue Oct 27 12:13:38 CDT 2015
#+end_example

It's best to avoid un-necessary manual steps, and CFEngine can be used
to automatically invoke the `masterfiles-stage.sh` script. In fact,
this execution has been included in the masterfiles policy framework
for some time as a CFEngine Enterprise feature. While this script is
*NOT* currently the same script that ships with CFEngine Enterprise,
it is the logical extension of the script that ships with CFEngine
Enteprise and can be used in it's place with minor modifications.

At the time of this writing the bundle that activates the
`masterfiles-stage.sh` script can be found [[https://github.com/cfengine/masterfiles/blob/master/cfe_internal/update/cfe_internal_update_from_repository.cf][here]].


* Phased Rollout with Multiple Staged Masterfiles

The `masterfiles-stage.sh` script can support an implementation for
phased rollout. Phased Rollout is the process of releasing a *policy*
change to a population in a controlled manner.

Read [[file:phased_rollout/README.org][this document]] for further information on using the
`masterfiles-stage.sh` to help accomplish a phased roll out.
