\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename st-virt.info
@settitle Virtualization and Cloud Support in CFEngine
@setchapternewpage odd
@c %** end of header

@titlepage
@title Virtualization and Cloud Support in CFEngine
@subtitle A CFEngine Special Topics Handbook
@author CFEngine AS


@page

@cartouche
@quotation
CFEngine Nova integrates simply with existing frameworks for
virtualization and cloud computing, allowing you to apply convergent
`self-healing' methods to the deployment and management of virtual
machines running anywhere.

@end quotation
@end cartouche

@vskip 0pt plus 1filll
Copyright @copyright{} 2010 CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                      CFEngine is a language based tool specifically
                      designed for configuring and maintaining
                      Unix-like operating systems attached
                      to a TCP/IP network.
@end direntry
@end ifinfo


@node Top, What are virtualization and cloud computing?, (dir), (dir)
@top Virtualization 

@ifnottex
@menu
* What are virtualization and cloud computing?::  
* Why build virtualization support into CFEngine?::  
* What can CFEngine do with virtual machines?::  
* Guest environments promises::       
* Virtualization types supported::  
* Distinct states::             
* Example deployment::          
* Virtualized host examples::   
* Virtual network example::     
@end menu

@end ifnottex
@iftex
@contents
@end iftex

@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
<h2>Summary of contents</h2>
@end html
@end ifhtml

@node What are virtualization and cloud computing?, Why build virtualization support into CFEngine?, Top, Top
@unnumberedsec What are virtualization and cloud computing?
@sp 1

Virtualization refers to the ability to run multiple host instances on
a single physical node. Cloud computing typically refers to what is
called `platform as a service', or deployment of virtual machines on
demand, often as an online service.

In this document, virtualization support refers specifically to
hypervisor technologies supported by the open source library layer @i{libvirt}
project, which includes interfaces for Xen, KVM, Vmware-ESX, and more.
CFEngine thus integrates freely with other tools based on this library, such
as @i{virsh} and the @i{Virtual Manager} graphical user interface.


@node Why build virtualization support into CFEngine?, What can CFEngine do with virtual machines?, What are virtualization and cloud computing?, Top
@unnumberedsec Why build virtualization support into CFEngine?
@sp 1

Virtualization engines (usually called supervisors or hypervisors) are
seeing an explosion of development. They exist as a number of projects
in various stages of maturity. The libvirt project was designed as
an integration layer based on an XML specification.

The tools for management are still quite primitive and require much
manual work. CFEngine has a unique role to play in maintaining desired
state in virtual machine systems.  

In the cloud, virtual machines may be rented from remote commercial
providers, and managed as disposable resources. Convergent or
`self-healing' maintenance is an essential method for managing
machines that are geographically remote and awkward to access, e.g.
machines in other time-zones that it is impractical to monitor by
legacy methods.


@node What can CFEngine do with virtual machines?, Guest environments promises, Why build virtualization support into CFEngine?, Top
@unnumberedsec What can CFEngine do with virtual machines?
@sp 1

The simple answer is: anything that @i{libvirt} can do, with added
convergence to a desired state: that means, creating, destroying and
starting and stopping machines. By starting virtual machines through
CFEngine, you can be sure that a given `virtual guest' is running on
one and only one physical host, thus avoiding conflicts that are
difficult to detect with centralized systems.

CFEngine does not support everything that libvirt does -- it offers a
simplified interface that is meant for robustness, stability and
hands-free repeatability.

@sp 1
@cartouche
CFEngine does not use libvirt's TLS based web communication layer.  It
manages every host as an independent entity, in typical CFEngine
fashion, using CFEngine's own distributed cooperation to provide thje
implicit communication.  CFEngine does not currently support so-called
`live migration' of virtual machines.
@end cartouche
@sp 1

@node Guest environments promises, Virtualization types supported, What can CFEngine do with virtual machines?, Top
@unnumberedsec Guest environments promises
@sp 1

A virtual machine is one example of what CFEngine calls an
`guest_environment'.  You can promise to create (and host) an guest environment
with certain attributes, just as you can promise to host a file or a
process. Here is a simple example:

@verbatim
body common control
{
bundlesequence  => { "my_vm_cloud" };   
}

#######################################################

bundle agent my_vm_cloud
{
guest_environments:

   "myUbuntu" # the running instance name, defined in XML

       environment_resources => virt_xml,
       environment_type      => "xen",
       environment_host      => "my_physical_computer", # ipv4_10_1_2_3
       environment_state     => "create";
}

#######################################################

body environment_resources virt_xml
{
env_spec_file => "/srv/xen/centos5-libvirt-create.xml";
}

@end verbatim

@itemize
@item The promiser (in this case @samp{myUbuntu}) is the name of the virtual
machine. This should be a unique identifier, as we need to be able to
refer to machines uniquely.

@item The guest environment host is the name of the computer that
is the host for the virtual machine. 

@item Normally when we want to ensure something on a machine, we use classes
to decide where the promise will be made. For guest environments, however,
we need to make promises about the uniqueness of the machine. When you
make a machine instance you normally want it to be running on one and
only one host. So you want @i{every} machine to make a promise. On the
guest environment's host, you want to promise that the guest environment is
running, and on every other machine you want to promise that it is
not. In CFEngine, you simply include a unique class belonging to host
in the promise using @code{environment_host} and CFEngine assumes that
rest. Unique classes might include
@itemize
@item Hostname class e.g. @code{myhost_CFEngine_com}
@item IP address class e.g. @code{ipv4_123_456_789_123}
@end itemize
@end itemize

An alternative way to write this example is to quote the XML
specification in CFEngine directly. This has a few advantages: you can
re-use the data and use it as a template, filling in
CFEngine-variables. You can thus adapt the configuration using
CFEngine's classes.

@page
@verbatim
bundle agent my_vm_cloud
{
guest_environments:

   "myUbuntu" # the running instance name, defined in XML
       environment_resources => virt_xml("$(this.promiser)"),
       environment_type      => "xen",
       environment_host      => "myphysicalcomputer";
       environment_state     => "create"
}

#######################################################

body environment_resources virt_xml(host)
{
env_spec_file => 

"<domain type='xen'>
  <name>$(host)</name>
  <os>
    <type>linux</type>
    <kernel>/var/lib/xen/install/vmlinuz-ubuntu10.4-x86_64</kernel>
    <initrd>/var/lib/xen/install/initrd-vmlinuz-ubuntu10.4-x86_64</initrd>
    <cmdline> kickstart=http://example.com/myguest.ks </cmdline>
  </os>
  <memory>131072</memory>
  <vcpu>1</vcpu>
  <devices>
    <disk type='file'>
      <source file='/var/lib/xen/images/$(host).img'/>
      <target dev='sda1'/>
    </disk>
    <interface type='bridge'>
      <source bridge='xenbr0'/>
      <mac address='aa:00:00:00:00:11'/>
      <script path='/etc/xen/scripts/vif-bridge'/>
    </interface>
    <graphics type='vnc' port='-1'/>
    <console tty='/dev/pts/5'/>
  </devices>
</domain>
";
}
@end verbatim

You should consult the libvirt documentation for the details of the XML specification.


@node Virtualization types supported, Distinct states, Guest environments promises, Top
@unnumberedsec Virtualization types supported
@sp 1

CFEngine currently supports virtualization only through libvirt, so it supports
those technologies that libvirt supports. Currently this includes  most popular
technologies. You must choose the type of monitor that is to be responsible for
keeping the guest environment promise. In CFEngine, you should choose between a
machine environment or network environment of the following types:
@table @code
@item xen
A Xen hypervisor virtual domain.
@item kvm
A KVM hypervisor virtual domain.
@item esx
A VMware hypervisor virtual domain.
@item test
The libvirt test-hypervisor virtual domain.
@item xen_net
A Xen hypervisor virtual network.
@item kvm_net
A KVM hypervisor virtual network
@item esx_net
An ESX/VMWare hypervisor virtual network.
@item test_net
The test hypervisor virtual network.
@item zone
A Solaris zone (future development)
@item ec2
An Amazon EC2 instance (future development)
@item eucalyptus
A Eucalyptus instance (future development)
@end table


Once again, you must consult the libvirt documentation for details.

@node Distinct states, Example deployment, Virtualization types supported, Top
@unnumberedsec Distinct states
@sp 1

Libvirt recognizes a number of distinct states are transliterated into CFEngine
as
@table @code
@item create
Build and start an guest environment.
@item delete
Halt and remove runtime resources associated with an guest environment.
@item running
An existing guest environment is in a running state.
@item suspended
An existing guest environment is in a `paused' state.
@item down
An existing guest environment is in a halted state.
@end table
The default promised state is for a machine to be running 
wherever the  @code{environment_host} class is true, and
suspended or down elsewhere.



@node Example deployment, Virtualized host examples, Distinct states, Top
@unnumberedsec Example deployment
@sp 1

Prerequisites: you need to make a `disk image' for the machine, or a
virtual disk of blocks that can be allocated. This image does not have to
contain any data, it will simply as a block device for the VM. You
can then install it by booting the machine from a network image, like a
PXE/kickstart installation.

If you want to allocate disk blocks as the file grows, you can create
a file with a hole. The following command will creates a file of
2048MB, but the actual data blocks are allocated in a lazy fashion:

@verbatim

# dd if=/dev/zero of=/srv/xen/my.img oflag=direct bs=1M seek=2047 count=1

@end verbatim
To reserve all the data blocks right away: 
@verbatim

# dd if=/dev/zero of=/srv/xen/my.img oflag=direct bs=1M count=2048

@end verbatim

Libvirt uses an XML file format that cannot be circumvented. CFEngine
promises to honour the promises that are expressed in this file, as in
the examples above.  You need to find out about this file format from
the libvirt website.  To get CFEngine to honour these promises, you
point it to the specification that it should promise using
@code{spec_file}.

You need to set up a network for virtual machines to communicate with
the outside world. This can also be done with CFEngine, using the
network promise types to build a bridge into a virtual network.

Then just run CFEngine to start, stop or manage the guest environments on
each localhost. Run in verbose mode to see how CFEngine maintains the states
convergently.
@verbatim
# cf-agent -v
@end verbatim


@appendix Virtualization Examples

@node Virtualized host examples, Virtual network example, Example deployment, Top
@unnumberedsec Virtualized host examples

@verbatim

#######################################################

body common control
{
bundlesequence => {"my_vm_cloud"};
host_licenses_paid => "2";
}

#######################################################

bundle agent my_vm_cloud
{
guest_environments:

 linux::

 "bishwa-kvm1"
                 comment => "Keep this vm suspended",
   environment_resources => myresources,
        environment_type => "kvm",
       environment_state => "suspended",
        environment_host => "ubuntu";

 "bishwa-kvm2"

                 comment => "Keep this vm running",
   environment_resources => myresources,
        environment_type => "kvm",
       environment_state => "running",
        environment_host => "ubuntu";

 "bishwa-kvm3"
                 comment => "Power down this VM",
   environment_resources => myresources,
        environment_type => "kvm",
       environment_state => "down",
        environment_host => "ubuntu";

 "bishwa-kvm4"

                 comment => "Delete this VM",
   environment_resources => myresources,
        environment_type => "kvm",
       environment_state => "delete",
        environment_host => "ubuntu";

 "bishwa-kvm5"
                 comment => "Keep this vm running",
   environment_resources => myresources,
        environment_type => "kvm",
       environment_state => "running",
       environment_host => "ubuntu";

}


#######################################################

body environment_resources myresources
{
env_cpus => "2";
#env_memory => "512"; # in KB
#env_disk => "2048";  # in MB
}


@end verbatim


@node Virtual network example,  , Virtualized host examples, Top
@unnumberedsec Virtual network example

@verbatim

body common control
{
bundlesequence => {"my_vm_cloud"};
host_licenses_paid => "2";
}

#####################################################

bundle agent my_vm_cloud
{
guest_environments:

linux::

"cfvrnet1"
comment => "Create a virtual network from given xml file",
environment_resources => virt_xml("$(this.promiser)"),
environment_type      => "kvm_net",
environment_state     => "create",
environment_host      => "ubuntu";
}

#####################################################
body environment_resources virt_xml(name)
{

 env_spec_file =>"
 "
  <network>
  <name>$(name)</name>
  <bridge name='virbr1' />
  <forward mode='route' dev='eth0'/>
  <ip address='192.168.123.1' netmask='255.255.255.0'>
  <dhcp>
  <range start='192.168.123.2' end='192.168.123.254' />
  </dhcp>
  </ip>
  </network>
  ";
}

@end verbatim


@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https:// 
ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google- 
analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye

