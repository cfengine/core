#######################################################
#
# Test this.promiser on files promises
#
#######################################################

body common control
{
      inputs => { "../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

body classes promiser0_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_0_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_0_ok" };
}

body classes promiser1_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_1_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_1_ok" };
}

body classes promiser2_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_2_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_2_ok" };
}

body classes promiser3_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_3_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_3_ok" };
}

body classes promiser4_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_4_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_4_ok" };
}

bundle agent init
{
  vars:
      "files" slist => { "aa", "ab", "ac", "ba", "bb", "bc" };

  files:
      "$(G.testdir)/copy_me_source"
        create => "true";
}

#######################################################

bundle agent test
{
  commands:
    "$(G.true)"
      classes => promiser0_generic;

  files:
    # 6 promisers
    "$(G.testdir)/$(init.files)"
      create => "true",
      classes => promiser1_generic;

    # 3 promisers
    "$(G.testdir)/a.*"
      perms => m("666"),
      classes => promiser2_generic;

    # 1 promisers - 1 file
    "$(G.testdir)"
      file_select => by_exec_cmd,
      perms => m("666"),
      classes => promiser2_generic,
      depth_search => test_recurse;

    # 6 promisers - 6 files
    "$(G.testdir)"
      file_select => test_plain,
      depth_search => test_recurse,
      delete => tidyfiles,
      classes => promiser3_generic;

    "$(G.testdir)/copy_me"
      copy_from => local_cp("$(this.promiser)_source");

  methods:
    "template_test" usebundle => template_test;
}

bundle agent template_test
{
  vars:
    "testdir" string => "$(G.testdir)/template_test";
    "cfe_files" slist => { "cfe_file1", "cfe_file2" };
    "mustache_files" slist => { "mustache_file1", "mustache_file2" };

  files:
    # create empty files so that we can test pattern and file_select cases
    "$(testdir)/."
      create => "true";

    "$(testdir)/$(cfe_files)"
      create => "true";
    "$(testdir)/$(mustache_files)"
      create => "true";

    "$(testdir)/$(cfe_files).cf-template"
      create => "true",
      edit_line => insert_lines("Just a cfengine line for $(this.promiser).");

    "$(testdir)/$(mustache_files).mustache"
      create => "true",
      edit_line => insert_lines("Just a mustache line for $(this.promiser).");

    "$(testdir)/cfe_file[1,2]"
      perms => m("666"),
      template_method => "cfengine",
      edit_template => "$(this.promiser).cf-template",
      classes => promiser4_generic;

    "$(testdir)/mustache_.*"
      file_select => mustache_files,
      perms => m("666"),
      template_method => "mustache",
      edit_template => "$(this.promiser).mustache",
      classes => promiser4_generic;
}

body file_select mustache_files
{
     leaf_name => { "@(template_test.mustache_files)" };
     file_result => "leaf_name";
}

body delete tidyfiles
{
     dirlinks => "delete";
     rmdirs   => "true";
}

body file_select test_plain
{
      leaf_name => { "[a,b][a,b,c]" };
      file_types => { "plain" };
      file_result => "file_types.leaf_name";
}

body file_select by_exec_cmd
# Redmine #3530
{
      leaf_name => {"ba"};
      exec_program => "/bin/ls $(this.promiser)";
      file_result => "leaf_name.exec_program";
}

body depth_search test_recurse
{
      depth => "inf";
}


#######################################################

bundle agent collect
{
  vars:
      "todo" slist =>  expandrange("[0-4]", 1);
      "ok_$(todo)_count" int => countclassesmatching(".*_$(todo)_ok");
      "found_copy_me" int => length(findfiles("$(G.testdir)/copy_me"));

      "bad_count" int => countclassesmatching("__this_promiser_[0-9]_ok");
}

#######################################################

bundle agent check
{
  vars:
      "ok_$(collect.todo)_classes" slist => classesmatching(".*_$(collect.todo)_ok");

  methods:
      "collect";
      "check"  usebundle => dcs_check_state(collect,
                                           "$(this.promise_filename).expected.json",
                                           $(this.promise_filename));
  reports:
    DEBUG::
      "$(collect.todo): count=$(collect.ok_$(collect.todo)_count)";
      "$(collect.todo): class = $(ok_$(collect.todo)_classes)";
}

### PROJECT_ID: core
### CATEGORY_ID: 27
