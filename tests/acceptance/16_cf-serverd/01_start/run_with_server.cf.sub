body classes if_failed(x)
{
      repair_failed => { "$(x)" };
}

body contain run_under_shell
{
      useshell => "useshell";
}

body action in_background
{
      background => "true";
}


bundle agent generate_key
{
  commands:
      "$(sys.cf_key)";
}


bundle agent start_server(server_name)
{
  classes:
      "debug_server" expression => "debug_mode";

  vars:
      "cwd" string => dirname("$(this.promise_filename)");
      "dlog" string => "$(sys.workdir)/server-debug.$(server_name).log";
      "conf" string => "$(cwd)/$(server_name).srv";

  commands:
    !debug_server.!windows::
      "$(sys.cf_serverd) -Kf $(conf)"
      classes => if_failed("server_failed");
    !debug_server.windows::
      # Windows cannot daemonize and needs to start in background.
      "$(sys.cf_serverd) -Kf $(conf)"
      action => in_background,
      classes => if_failed("server_failed");

    debug_server::
      "$(sys.cf_serverd) -Kdf $(conf) > $(dlog) 2>&1"
      contain => run_under_shell,
      action => in_background,
      handle => "run_debug_server",
      classes => if_failed("server_failed");

    debug_server|windows::
      # Sleep 3 seconds since cf-serverd takes some time to start in background mode.
      "$(G.sleep) 3"
      depends_on => { "run_debug_server" },
      contain => run_under_shell;

  reports:
    debug_server::
      "$(sys.cf_serverd)($(server_name)) was run in debug mode with configuration $(conf).  The logs will be in $(dlog)";
}

bundle agent run_test(test_name)
{
  classes:
      "debug_client" expression => "debug_mode";

  vars:
      "dlog" string => "$(sys.workdir)/agent-debug.log";
  commands:
    !debug_client::
      "$(sys.cf_agent) -KIf $(test_name) -D DEBUG,AUTO,ok 2>&1 | $(G.tee) $(dlog)"
      contain => run_under_shell;
    debug_client::
      "$(sys.cf_agent) -Kdf $(test_name) -D DEBUG,AUTO,ok 2>&1 | $(G.tee) $(dlog)"
      contain => run_under_shell;

  reports:
    debug_client::
      "$(sys.cf_agent) was run in debug mode with configuration $(test_name).  The logs will be in $(dlog)";
}


bundle agent stop_server(server_name)
{
  # On some old platforms, "ps" truncates its output, which CFEngine depends on. This can lead to
  # the test servers not being killed.
  # On HP-UX you can set the DEFAULT_CMD_LINE_WIDTH inside /etc/default/ps to a higher value, which
  # controls the maximum line length of "ps". Unfortunately it is not overridable from the
  # environment.
  processes:
      "$(server_name)"
      signals => { "term", "kill" };
}
