#######################################################
#
# Test modifying a user with a password.
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub", "user_queries.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
}

#######################################################

bundle agent init
{
  users:
    "johndoe"
      policy => "present",
      password => init_password;
}

body password init_password
{
  format => "plaintext";
  data => "Bad0P4SSW0RD";
}

#######################################################

bundle agent test
{
  vars:
    "hash" string => "dTloMVpjYt1w2";

  users:
    "johndoe"
      policy => "present",
      password => test_password;
}

body password test_password
{
  format => "hash";
  data => "$(test.hash)";
}

#######################################################

bundle agent check
{
  methods:
    !windows::
      "any" usebundle => user_has_password_hash("johndoe", "$(test.hash)", "success", "failure"),
        classes => always("methods_run");
    windows::
      # Hash not supported on Windows. Make sure it is the same as before.
      "any" usebundle => user_has_password("johndoe", "Bad0P4SSW0RD", "success", "failure"),
        classes => always("methods_run");

  classes:
      "ready" expression => "methods_run";
      "ok" and => { "success", "!failure" };

  reports:
    ok.ready::
      "$(this.promise_filename) Pass";
    !ok.ready::
      "$(this.promise_filename) FAIL";
}
