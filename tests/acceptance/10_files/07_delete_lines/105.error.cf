#######################################################
#
# Delete a number of lines via an slist
# Region editing, include_start_delimiter and include_end_delimiter
# Notice that this is a misinterpretation of our language, once the 
# start_delimiter is deleted, the region will not be matched again.
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };     
      version => "1.0";
}

bundle agent init
{
  vars:
      "states" slist => { "actual", "expected" };

      "actual" string =>
      "header
header
BEGIN
    One potato
    Two potato
    Three potatoe
    Four
END
trailer
trailer";
      
      "expected" string =>
      "header
header
    One potato
    Two potato
    Three potatoe
    Four
END
trailer
trailer";
      
  files:
      "$(G.testfile).$(states)"
      create => "true",
      edit_line => init_insert("$(init.$(states))"),
      edit_defaults => init_empty;
}

bundle edit_line init_insert(str)
{
  insert_lines:
      "$(str)";
}

body edit_defaults init_empty
{
      empty_file_before_editing => "true";
}

#######################################################

bundle agent test
{
  vars:
      "tstr" slist => { "BEGIN", "    Three potatoe", "END" };
      
  files:
      "$(G.testfile).actual"
      edit_line => test_delete("$(test.tstr)");

}

bundle edit_line test_delete(str)
{
  delete_lines:
      "$(str)"
      select_region => test_select;
}

body select_region test_select
{
      select_start => "BEGIN";
      select_end => "END";
      include_start_delimiter => "true";
      include_end_delimiter => "true";
}


#######################################################

bundle agent check
{
  methods:
      "any" usebundle => dcs_check_diff("$(G.testfile).actual",
					    "$(G.testfile).expected",
					    "$(this.promise_filename)");
}
### PROJECT_ID: core
### CATEGORY_ID: 27
