#######################################################
#
# Test deletion a named versioned package
#
#######################################################

body common control
{
    inputs => { 
               "../default.cf.sub", 
              };
    bundlesequence  => { default("$(this.promise_filename)") };
    version => "1.0";
}



#######################################################

bundle agent init
{
  
}

#######################################################

bundle agent test
{
    vars:

        debian::
            "name" string => "zip";
            "arch" string => "amd64";
            "version" string => "3.0-7";
            
        redhat::
            "name" string => "zip";
            "arch" string => "x86_64";
            "version" string => "3.0-1.el6";
          
  
    packages:
  
        debian::
            "$(name)"
            package_policy => "delete",
            package_method => named_apt_get,
            classes => test_set_class("pass","fail");
     
        redhat::
            "$(name)"
            package_version => "$(version)",
            package_architectures => { "x86_64" },      
            package_policy => "delete",
            package_method => named_yum_delete,
            classes => test_set_class("pass","fail");
}



body classes test_set_class(ok_class,notok_class)
{
    promise_kept => { "$(ok_class)" };
    promise_repaired => { "$(ok_class)" };
    repair_failed => { "$(notok_class)" };
}

#######################################################

bundle agent check
{

    classes:
    
        debian::
            "has_pkg" expression => returnszero("/usr/bin/apt-cache policy $(test.name) | /bin/grep -q none", "useshell");

        redhat::
            "has_pkg" not => returnszero("/bin/rpm -qa | grep -qw $(test.name)", "useshell");
            
        any::
            "ok" expression => "pass.!fail.has_pkg";
  
    reports:
      ok::
        "$(this.promise_filename) $(test.name)=$(test.version)  Pass";
      !ok::
        "$(this.promise_filename) FAIL";
}

body classes succesfully_executed(class)
{
    kept_returncodes => { "0" };
    promise_kept => { "$(class)" };
}



