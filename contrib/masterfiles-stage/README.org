#+Title: Masterfiles Stage

This script is designed to run on the Policy Server and safely deploy
policy from upstream locations to a directory on the Policy Server for
distribution to clients.

[[file:images/basic_cfengine_architecture.png]]

As it is recommended to store and manage CFEngine policy in a version
control system like git or subversion, the typical and recomended
"upstream" source is a version control repository.

Deployment is done in a safe manner by first preparing masterfiles in
a staging area before deploying the policy to the directory where
clients [[https://docs.cfengine.com/latest/reference-promise-types-access.html#top][have access]] and expect it to be distributed from.

"Staging" is the process of preparing a temporary location with the
content of masterfiles sourced from an upstream location. Once the
temporary location has been updated it is validated and prepared for
deployment through various means.

The following are the common minimal staging actions:
  - `cf-promises` is used to validate the policy
    - This is done to try and prevent broken policy from being made
      available to remote agents
  - apply restrictive permissions
    - This is done because version control systems are notoriously
      poor at preserving correct and restrictive permissions.

Once the policy has been successfully staged the policy is deployed to
the final location for distribution to remote agents. In the most
simple environments this will be `$(sys.masterdir)` (typically
/var/cfengine/masterfiles) on the policy server.


* Current Features
- Supported upstreams
  - VCS_TYPE="GIT"
  - VCS_TYPE="GIT_TAG_OR_COMMIT"
  - VCS_TYPE="SVN"
  - VCS_TYPE="GIT_POLICY_CHANNELS"

* Dependencies
This script has the following dependencies
- bash
- rsync (SVN only)
- git|svn

* Installation
Installation simply consists of saving `masterfiles-stage.sh` and its
supporting `common.sh` and `options.sh` to the same directory on your hub
and making sure that `masterfiles-stage.sh` is executable.

#+begin_src example
  wget https://raw.githubusercontent.com/cfengine/core/master/contrib/masterfiles-stage/masterfiles-stage.sh -O /var/cfengine/bin/masterfiles-stage.sh
  wget https://raw.githubusercontent.com/cfengine/core/master/contrib/masterfiles-stage/common.sh -O /var/cfengine/bin/common.sh
  wget https://raw.githubusercontent.com/cfengine/core/master/contrib/masterfiles-stage/options.sh -O /var/cfengine/bin/options.sh
  chown root:root /var/cfengine/bin/masterfiles-stage.sh /var/cfengine/bin/common.sh /var/cfengine/bin/options.sh
  chmod 555 /var/cfengine/bin/masterfiles-stage.sh
  chmod 444 /var/cfengine/bin/common.sh /var/cfengine/bin/options.sh
#+end_src

*Warning:* The above commands may not work out of the box depending on
 how new your ssl certificates are.

* Configuration

The `masterfiles-stage.sh` script takes options in order to specify the
directory where the masterfiles should be deployed after staging, as well as
the file that contains the parameters that should be used in order to interface
with the given upstream source implementation (git url, branch etc ..)
Run masterfiles-stage.sh --help to see exact option flags.

- `MASTERDIR` is the fully qualified path to the location that you
  want masterfiles to be deployed to after successful staging.

- `PARAMS` is the fully qualified path to the location of the
  parameter set that describes information needed by the selected
  staging method (currently reffered to as `VCS_TYPE`). The format of
  the file is a simple KEY="VALUE". It is sourced by the
  `masterfiles-stage.sh` script. Each staging method or `VCS_TYPE`
  defined may define its own parameters. It is recommended that the
  parameters defined by the `VCS_TYPE` be prefixed with the `VCS_TYPE`
  so as not to conflict with other staging methods.

  Example PARAMS files can be found [[file:example_params/][here]].

*** Reserved Parameters
The following parameters are in use, be sure to avoid their collision
when developing new staging methods.

- VCS_TYPE - The staging method to use
  - Currently supported: (GIT|GIT_TAG_OR_COMMIT|GIT_POLICY_CHANNELS|SVN)

- GIT_URL - The URL to the git repository
  - Example values:
    - https://gitlab.com/nickanderson/masterfiles_demo_3.7.git
    - git@gitlab.com:nickanderson/masterfiles_demo_3.7.git

- GIT_BRANCH - The git branch to checkout
  - master

- GIT_TAG_OR_COMMIT
  - Example values:
    - 88335d36b48c8808b12b48667a463182dc8d0338
    - mytag

- channel_config_file - The path to the config file for multiple policy channels
  - Example value:
    - /var/cfengine/policy_channels/channel_to_source.txt

- SVN_URL - The URL to the svn repository

- SVN_BRANCH - The svn branch to checkout

- ROOT - Location where policy is staged.
  - /opt/cfengine/masterfiles_staging

The following attributes are used by CFEngine Enterprise and currently
have no effect on functionality of `masterfiles-stage.sh`

- GIT_WORKING_BRANCH - Branch for integrating write operations
  - This is used by Design Center in CFEngine Enterprise

- GIT_EMAIL - Email address used to associate commits wit
  - This is used by Design Center in CFEngine Enterprise

- GIT_AUTHOR - The author that should be set when integrating write
  operations (not used by `masterfiles-stage.sh`)
  - This is used by Design Center in CFEngine Enterprise

- PKEY - Private SSH Key used for authorization when pushing
  integrated write operations
  - This is used by Design Center in CFEngine Enterprise

- SCRIPT_DIR - Directory contianing supporting scripts
  - This is used by Design Center in CFEngine Enterprise

*** Special Note
The executing user may require additional configuration in order to
successfully authenticate. The specifics depend on the specifics of
your upstream repository. For example, an upstream repository over
http or https that allows anonymous access may need no addtional
configuration, but an upstream that uses ssh keys for authentication
may require trust establishment (accepting the host key fingerprint),
and the presence of an ssh key for authentication. Depending on the
security requirements of your organization, you may use a
passphraseless key, or you may use something like ssh-agent.


* Example Usage

The script can be invoked manually:

#+begin_example
  /var/cfengine/bin/masterfiles-stage.sh -d /tmp/deployed_masterfiles -p /var/cfengine/masterfiles-stage_parmas/PARAMS_example_git_branch.sh
  tail -n1 /var/cfengine/outputs/dc-scripts.log
  Successfully deployed branch 'master' from 'https://gitlab.com/nickanderson/masterfiles_demo_3.7.git' to '/var/cfengine/masterfiles' on Sun Dec  6 23:00:34 UTC 2015
#+end_example

Or execution can be automated with CFEngine.

#+begin_src cfengine3
bundle agent stage_masterfiles
{
  vars:
      policy_server::
      "deploy_script"
        string => "/var/cfengine/bin/masterfiles-stage.sh";

      "masterfiles_deploy_destination"
        string => "/var/cfengine/masterfiles";

  commands:
      policy_server::
      # masterfiles-stage.sh DESTINATION PARAMS
      "$(deploy_script)"
        args => "-d '$(masterfiles_deploy_destination)' -p '/var/cfengine/deploy_params/PARAMS_masterfiles.sh'",
        comment => "Masterfiles should be deployed to $(masterfiles_deploy_destination) using ";
}
#+end_src

* Phased Rollout with Multiple Staged Masterfiles

The `masterfiles-stage.sh` script can support an implementation for
phased rollout. Phased Rollout is the process of releasing a *policy*
change to a population in a controlled manner.

Read [[file:phased_rollout/README.org][this document]] for further information on using the
`masterfiles-stage.sh` to help accomplish a phased roll out.
