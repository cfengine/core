#######################################################
#
# Acceptance test for issue #4070
# Ensure that cfengine creates a
# file that has the same name as a pre-existing 
# directory without consuming 100% cpu and crashing
# This test does what it says in 4070 - it creates
# a directory e.g. /tmp/backup/my_dir
# It then causes cfengine to create a file with an
# identical name i.e. /tmp/backup/my_dir
# The names above are simplified so as not to cause
# confusion. 
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}


#######################################################

bundle agent init
{
      
      #######################################
      #Clean up test directory before testing
      #######################################
      
  files:
      "$(G.testdir)/."
      depth_search => recurse("inf"),
      delete => tidy,
      file_select => all,
      classes => if_ok("dir_purged");

  commands:
    dir_purged::
      "$(G.mkdir) -p"
      args => "$(G.testdir)/backup/_tmp_TEST_cfengine_test";
}

body edit_defaults empty
{
      empty_file_before_editing => "true";
      edit_backup => "false";
}

bundle edit_line test_insert(str)
{
  insert_lines:
      "$(sys.date)";
}

body delete tidy

{
      dirlinks => "delete";
      rmdirs   => "true";
}

body depth_search recurse(d)

{
      depth => "$(d)";
      xdev  => "true";
}

body file_select all
{

      leaf_name => { ".*" };
      file_result => "leaf_name";
}


#######################################################

bundle agent test
{
  files:     
    agent_ran::
      "$(G.testdir)/test"
      edit_line => test_insert("inserted text"),
      classes => if_ok("file_edited");

  commands:
      "$(sys.cf_agent)"
      args => "-f $(this.promise_filename).sub -K",
      classes => if_ok("agent_ran");
      
    file_edited::
      "$(sys.cf_agent)"
      args => "-f $(this.promise_filename).sub -K -D SECOND_RUN",
      classes => classes_generic("agent_ran_test"), 
      contain => test_timeout;  
      
}

body contain test_timeout
{
      exec_timeout => "2";
}

body classes classes_generic(x)
# Define x prefixed/suffixed with promise outcome
{
      promise_repaired => { "promise_repaired_$(x)", "$(x)_repaired", "$(x)_ok", "$(x)_reached" };
      repair_failed => { "repair_failed_$(x)", "$(x)_failed", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      repair_denied => { "repair_denied_$(x)", "$(x)_denied", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      repair_timeout => { "repair_timeout_$(x)", "$(x)_timeout", "$(x)_not_ok", "$(x)_not_kept", "$(x)_not_repaired", "$(x)_reached" };
      promise_kept => { "promise_kept_$(x)", "$(x)_kept", "$(x)_ok", "$(x)_not_repaired", "$(x)_reached" };
}

body classes if_ok(x)
{
      promise_repaired => { "$(x)" };
      promise_kept => { "$(x)" };
}

#######################################################

bundle agent check
{
      
  classes:
      "ok" expression => fileexists("$(G.testdir)/SECOND_RUN");

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::    
      "$(this.promise_filename) FAIL";
      
}
