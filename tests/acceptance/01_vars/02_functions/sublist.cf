#######################################################
#
# Test sublist()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "results" slist => {
                           "starting list = 1",
                           "starting list = 2",
                           "starting list = 3",
                           "starting list = one",
                           "starting list = two",
                           "starting list = three",
                           "starting list = long string",
                           "head(1) = 1",
                           "head(9999) = 1",
                           "head(9999) = 2",
                           "head(9999) = 3",
                           "head(9999) = long string",
                           "head(9999) = one",
                           "head(9999) = three",
                           "head(9999) = two",
                           "tail(1) = three",
                           "tail(10) = 1",
                           "tail(10) = 2",
                           "tail(10) = 3",
                           "tail(10) = long string",
                           "tail(10) = one",
                           "tail(10) = three",
                           "tail(10) = two",
                           "tail(2) = three",
                           "tail(2) = two",
                           "tail(9999) = 1",
                           "tail(9999) = 2",
                           "tail(9999) = 3",
                           "tail(9999) = long string",
                           "tail(9999) = one",
                           "tail(9999) = three",
                           "tail(9999) = two",
      };

  files:
      "$(G.testfile).expected"
      create => "true",
      edit_defaults => init_empty,
      edit_line => init_insert;
}

body edit_defaults init_empty
{
      empty_file_before_editing => "true";
      edit_backup => "false";
}

bundle edit_line init_insert
{
  insert_lines:
      "$(init.results)";
}

#######################################################

bundle agent test
{
  vars:
      "test" slist => {
                        1,2,3,
                        "one", "two", "three",
                        "long string",
                        "one", "two", "three",
                      };

      "test_head9999" slist => sublist("test", "head", 9999);
      "test_head1" slist => sublist("test", "head", 1);
      "test_head0" slist => sublist("test", "head", 0);

      "test_tail9999" slist => sublist("test", "tail", 9999);
      "test_tail10" slist => sublist("test", "tail", 10);
      "test_tail2" slist => sublist("test", "tail", 2);
      "test_tail1" slist => sublist("test", "tail", 1);
      "test_tail0" slist => sublist("test", "tail", 0);

  files:
      "$(G.testfile).actual"
      create => "true",
      edit_line => test_insert;
}

bundle edit_line test_insert
{
  insert_lines:
      "starting list = $(test.test)";
      "This line should not appear: $(test.test_head0)";
      "head(1) = $(test.test_head1)";
      "head(9999) = $(test.test_head9999)";
      "This line should not appear: $(test.test_tail0)";
      "tail(1) = $(test.test_tail1)";
      "tail(10) = $(test.test_tail10)";
      "tail(2) = $(test.test_tail2)";
      "tail(9999) = $(test.test_tail9999)";
}

#######################################################

bundle agent check
{
  methods:
      "any" usebundle => sorted_check_diff("$(G.testfile).actual",
                                           "$(G.testfile).expected",
                                           "$(this.promise_filename)");
}
