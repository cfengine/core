#######################################################
#
# Test this.promiser on files promises 
#
#######################################################

body common control
{
      inputs => { "../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };   
      version => "1.0";
}

body classes promiser0_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_0_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_0_ok" };
}

body classes promiser1_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_1_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_1_ok" };
}

body classes promiser2_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_2_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_2_ok" };
}

body classes promiser3_generic
{
    promise_repaired => { "$(this.promiser)_repaired", "$(this.promiser)_3_ok" };
    promise_kept => { "$(this.promiser)_kept", "$(this.promiser)_3_ok" };
}

bundle agent init
{
  vars:
      "files" slist => { "aa", "ab", "ac", "ba", "bb", "bc" };
}

#######################################################

bundle agent test
{
  commands:
    "$(G.true)"
      classes => promiser0_generic;
  files:
    # 6 promisers
    "$(G.testdir)/$(init.files)"
      create => "true",
      classes => promiser1_generic;

    # 3 promisers
    "$(G.testdir)/a.*"
      perms => m("666"),
      classes => promiser2_generic;

    # 2 promisers - dir + 1 file
    "$(G.testdir)"
      file_select => by_exec_cmd,
      perms => m("666"),
      classes => promiser2_generic,
      depth_search => test_recurse;

    # 7 promisers - dir + 6 files
    "$(G.testdir)"
      file_select => test_plain,
      depth_search => test_recurse,
      delete => tidyfiles,
      classes => promiser3_generic;
}

body delete tidyfiles
{
     dirlinks => "delete";
     rmdirs   => "true";
}

body file_select test_plain
{
      file_types => { "plain" };
      file_result => "file_types";
}

body file_select by_exec_cmd
# Redmine #3530
{
      leaf_name => {"ba"};
      exec_program => "/bin/ls $(this.promiser)";
      file_result => "leaf_name.exec_program";
}

body depth_search test_recurse
{
      depth => "inf";
}


#######################################################

bundle agent check
{
  vars:
      "ok_promisers" slist => classesmatching(".*_ok");
      "ok_0_count" int => countclassesmatching(".*_0_ok");
      "ok_1_count" int => countclassesmatching(".*_1_ok");
      "ok_2_count" int => countclassesmatching(".*_2_ok");
      "ok_3_count" int => countclassesmatching(".*_3_ok");

  classes:
      "ok" expression => none("__this_promiser_[0,1,2,3]_ok", ok_promisers);
      "ok0" expression => strcmp("$(ok_0_count)", 1);
      "ok1" expression => strcmp("$(ok_1_count)", 6);
      "ok2" expression => strcmp("$(ok_2_count)", 5);
      "ok3" expression => strcmp("$(ok_3_count)", 7);

  reports:
    debug::
      "0: $(ok_0_count)";
      "1: $(ok_1_count)";
      "2: $(ok_2_count)";
      "3: $(ok_3_count)";

    ok.ok0.ok1.ok2.ok3::
      "$(this.promise_filename) Pass";
    !ok|!ok0|!ok1|!ok2|!ok3::
      "$(this.promise_filename) FAIL";
}
### PROJECT_ID: core
### CATEGORY_ID: 27
