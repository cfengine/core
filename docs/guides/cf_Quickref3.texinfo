\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}
@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename cf-QuickRef3.info
@settitle Quick Reference Guide for CFEngine 3
@c @setchapternewpage odd
@c %** end of header

@smallbook
@titlepage
@title Quick Reference Guide for CFEngine 3
@subtitle A CFEngine AS workbook
@author CFEngine AS
     
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2012 CFEngine AS

@end titlepage


@c *************************** File begins here ************************

@ifnottex
@node Top, Command reference, (dir), (dir)
@top CFEngine-Reference
@end ifnottex

@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                        CFEngine is a language based tool specifically
                        designed for configuring and maintaining
                        Unix-like operating systems attached
                        to a TCP/IP network.
@end direntry
@end ifinfo


@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>

<h2>Summary of contents</h2>

@end html
@end ifhtml

@iftex
@contents
@end iftex

@c **********************************************************************
@c CHAPTER
@c **********************************************************************

@menu
* Command reference::           
@end menu

@node Command reference,  , Top, Top
@chapter Command reference


@menu
* cf-promises - CFEngine's promise analyzer::  
* cf-agent - CFEngine's change agent::  
* cf-serverd - CFEngine's server agent::  
* cf-execd - CFEngine's execution agent::  
* cf-monitord - CFEngine's monitoring agent::  
* cf-runagent - Run agent::     
* cf-report - CFEngine's reporting agent::  
* cf-know - CFEngine's knowledge agent::  
* cf-key::                       
@end menu

@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cf-promises - CFEngine's promise analyzer, cf-agent - CFEngine's change agent, Command reference, Command reference
@section cf-promises - CFEngine's promise analyzer


The promise agent is a validator and analysis tool for
configuration files belonging to any of the components
of CFEngine. Configurations that make changes must be
approved by this validator before being executed.

@table @samp

@item --help       
(-h)       - Print the help message
@item --bundlesequence
(-b @var{value}) - Use the specified bundlesequence for verification
@item --debug       
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose     
(-v)       - Output verbose information about the behaviour of the agent
@item --dry-run    
(-n)       - All talk and no action mode - make no changes, only inform of promises not kept
@item --version    
(-V)       - Output the version of the software
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --define     
(-D) @var{value} - Define a list of comma separated classes to be defined at the start of execution
@item --negate     
(-N) @var{value} - Define a list of comma separated classes to be undefined at the start of execution
@item --inform     
(-I)       - Print basic information about changes made to the system, i.e. promises repaired
@item --diagnostic 
(-x)       - Activate internal diagnostics (developers only)
@item --analysis   
(-a)       - Perform additional analysis of configuration
@item --reports    
(-r)       - Generate reports about configuration

@end table

Debug levels: 1=parsing, 2=running, 3=summary, 4=expression eval



@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cf-agent - CFEngine's change agent, cf-serverd - CFEngine's server agent, cf-promises - CFEngine's promise analyzer, Command reference
@section cf-agent - CFEngine's change agent

The main CFEngine agent is the instigator of change
in the system. In that sense it is the most important
part of the CFEngine suite.


@table @samp
@item --bootstrap
(-B)       - Bootstrap/repair a CFEngine configuration from failsafe file in the current directory
@item --bundlsequence      
(-b)       - Set or override bundlesequence from command line
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --define     
(-D @var{value}) - Define a list of comma separated classes to be defined at the start of execution
@item --diagnostic 
(-x)       - Activate internal diagnostics (developers only)
@item --dry-run    
(-n)       - All talk and no action mode - make no changes, only inform of promises not kept
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --help       
(-h)       - Print the help message
@item --inform     
(-I)       - Print basic information about changes made to the system, i.e. promises repaired
@item --negate     
(-N @var{value}) - Define a list of comma separated classes to be undefined at the start of execution
@item --no-lock    
(-K)       - Ignore locking constraints during execution (ifelapsed/expireafter) if "too soon" to run
@item --policy-server
(-B)       - Define the server name or IP address of the a policy server (for use with bootstrap).
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --version    
(-V)       - Output the version of the software

@end table

Debug levels: 1=parsing, 2=running, 3=summary, 4=expression eval

@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cf-serverd - CFEngine's server agent, cf-execd - CFEngine's execution agent, cf-agent - CFEngine's change agent, Command reference
@section cf-serverd - CFEngine's server agent


The server daemon provides two services: it acts as a
file server for remote file copying and it allows an
authorized cf-runagent to start a cf-agent process and
set certain additional classes with role-based access
control.


@table @samp
@item --help       
(-h)       - Print the help message
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --version    
(-V)       - Output the version of the software
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --define     
(-D @var{value}) - Define a list of comma separated classes to be defined at the start of execution
@item --negate     
(-N @var{value}) - Define a list of comma separated classes to be undefined at the start of execution
@item --no-lock    
(-K)       - Ignore locking constraints during execution (ifelapsed/expireafter) if "too soon" to run
@item --inform     
(-I)       - Print basic information about changes made to the system, i.e. promises repaired
@item --diagnostic 
(-x)       - Activate internal diagnostics (developers only)
@item --no-fork    
(-F)       - Run as a foreground processes (do not fork)
@item --ld-library-path 
(-L @var{value}) - Set the internal value of LD_LIBRARY_PATH for child processes
@end table

Debug levels: 1=parsing, 2=running, 3=summary, 4=expression eval

@page
@c **********************************************************************
@c SECTION
@c **********************************************************************

@node  cf-execd - CFEngine's execution agent, cf-monitord - CFEngine's monitoring agent, cf-serverd - CFEngine's server agent, Command reference
@section cf-execd - CFEngine's execution agent

The executor daemon is a scheduler and wrapper for
execution of cf-agent. It collects the output of the
agent and can email it to a specified address. It can
splay the start time of executions across the network
and work as a class-based clock for scheduling.

@table @samp

@item --help       
(-h)       - Print the help message
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --dry-run    
(-n)       - All talk and no action mode - make no changes, only inform of promises not kept
@item --version    
(-V)       - Output the version of the software
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --define     
(-D @var{value}) - Define a list of comma separated classes to be defined at the start of execution
@item --negate     
(-N @var{value}) - Define a list of comma separated classes to be undefined at the start of execution
@item --no-lock    
(-K)       - Ignore locking constraints during execution (ifelapsed/expireafter) if "too soon" to run
@item --inform     
(-I)       - Print basic information about changes made to the system, i.e. promises repaired
@item --diagnostic 
(-x)       - Activate internal diagnostics (developers only)
@item --no-fork    
(-F)       - Run as a foreground processes (do not fork)
@item --no-winsrv
(-W)       - Do not run as a service on windows - use this when running from a command shell (commercial editions only)
@item --ld-library-path 
(-L @var{value}) - Set the internal value of LD_LIBRARY_PATH for child processes

@end table
Debug levels: 1=parsing, 2=running, 3=summary, 4=expression eval


@c **********************************************************************
@c SECTION
@c **********************************************************************

@node  cf-monitord - CFEngine's monitoring agent, cf-runagent - Run agent, cf-execd - CFEngine's execution agent, Command reference
@section cf-monitord - CFEngine's monitoring agent

The monitoring agent is a machine-learning, sampling
daemon which learns the normal state of the current
host and classifies new observations in terms of the
patterns formed by previous ones. The data are made
available to and read by cf-agent for classification
of responses to anomalous states.

@table @samp
@item --help       
(-h)       - Print the help message
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --dry-run    
(-n)       - All talk and no action mode - make no changes, only inform of promises not kept
@item --version    
(-V)       - Output the version of the software
@item --no-lock    
(-K)       - Ignore system lock
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --inform     
(-I)       - Print basic information about changes made to the system, i.e. promises repaired
@item --diagnostic 
(-x)       - Activate internal diagnostics (developers only)
@item --no-fork    
(-F)       - Run process in foreground, not as a daemon
@item --histograms 
(-H)       - Store informatino about histograms / distributions
@item --tcpdump    
(-T)       - Interface with tcpdump if available to collect data about network

@end table

Debug levels: 1=parsing, 2=running, 3=summary, 

@page
@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cf-runagent - Run agent, cf-report - CFEngine's reporting agent, cf-monitord - CFEngine's monitoring agent, Command reference
@section cf-runagent - Run agent


The run agent connects to a list of running instances of
the cf-serverd service. The agent allows a user to
forego the usual scheduling interval for the agent and
activate cf-agent on a remote host. Additionally, a user
can send additional classes to be defined on the remote
host. Two kinds of classes may be sent: classes to decide
on which hosts the agent will be started, and classes that
the user requests the agent should define on execution.
The latter type is regulated by cfserverd's role based
access control.


@table @samp
@item --help       
(-h)       - Print the help message
@item --background
(-b @var{value}) - Parallelize connections (50 by default)
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --dry-run    
(-n)       - All talk and no action mode - make no changes, only inform of promises not kept
@item --version    
(-V)       - Output the version of the software
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --define-class 
(-D @var{value}) - Define a list of comma separated classes to be sent to a remote agent
@item --select-class 
(-s @var{value}) - Define a list of comma separated classes to be used to select remote agents by constraint
@item --inform     
(-I)       - Print basic information about changes made to the system, i.e. promises repaired
@item --remote-options 
(-o @var{value}) - Pass options to a remote server process
@item --diagnostic 
(-x)       - Activate internal diagnostics (developers only)
@item --hail
-H value - Hail the following comma-separated lists of hosts, overriding default list
@item --interactive
(-i)       - Enable interactive mode for key trust
@item --query
(-q @var{value}) - Query a server for a knowledge menu (commercial editions only)
@item --timeout
(-t @var{value}) - Connection timeout, seconds

@end table

Debug levels: 1=parsing, 2=running, 3=summary, 4=expression eval


@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cf-report - CFEngine's reporting agent, cf-know - CFEngine's knowledge agent, cf-runagent - Run agent, Command reference
@section cf-report - CFEngine's reporting agent

The reporting agent is a merger between the older
CFEngine programs cfshow and cfenvgraph. It outputs
data stored in CFEngine's embedded databases in human
readable form.


@table @samp

@item --help       
(-h)       - Print the help message
@item --class-regex
(-c @var{value}) - Specify a class regular expression to search for
@item --csv
(-C)       - Enable CSV output mode in hub queries
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --inform
(-I)       - Output information about actions performed by the agent
@item --version    
(-V)       - Output the version of the software
@item --no-lock
(-K)       - Ignore ifelapsed locks
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --hostkey
(-k @var{value}) - Specify a hostkey to lookup
@item --html       
(-H)       - Print output in HTML
@item --xml        
(-X)       - Print output in XML
@item --version    
(-V)       - Print version string for software
@item --purge      
(-P)       - Purge data about peers not seen beyond the threshold horizon for assumed-dead
@item --erasehistory 
(-E @var{value}) - Erase historical data from the cf-monitord monitoring database
@item --nova-export
(-x @var{value}) - Export Nova reports to file - delta or full report (commercial editions only)
@item --nova-import
(-i @var{value}) - Import Nova reports from file - specify the path (only on Nova policy hub)
@item --outputdir  
(-o @var{value}) - Set output directory for printing graph data
@item --promise-handle
(-p @var{value}) - Specify a promise-handle to look up
@item --query-hub
(-q @var{value}) - Query hub database interactively with optional regex search string
@item --titles     
(-t)       - Add title data to generated graph files
@item --timestamps 
(-T)       - Add a time stamp to directory name for graph file data
@item --resolution 
(-R)       - Print graph data in high resolution
@item --show
(-1 @var{value}) - Show data matching named criteria (software,variables,classes)
@item --syntax
(-S)       - Print a syntax summary for this CFEngine version
@item --syntax-export
(-s)       - Export a syntax tree in Javascript format
@item --no-error-bars
(-e)       - Do not add error bars to the printed graphs
@item --no-scaling 
(-n)       - Do not automatically scale the axes
@item --remove-hosts, 
(-r @var{value}) - Remove comma separated list of IP address entries from the hosts-seen database
@end table


@page
@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cf-know - CFEngine's knowledge agent, cf-key, cf-report - CFEngine's reporting agent, Command reference
@section cf-know - CFEngine's knowledge agent

The knowledge management agent is capable of building
an analysing a semantic knowledge network. It can
configure a relational database to contain an ISO
standard topic map and permit regular-expression based
searching of the map. Analysis of the semantic network
can be performed providing graphical output of the data,
and cfknow can assemble and converge the reference manual
for the current version of the CFEngine software.


@table @samp

@item --help       
(-h)       - Print the help message
@item --build
(-b)       - Build and store topic map in the CFDB
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --version    
(-V)       - Output the version of the software
@item --file       
(-f @var{value}) - Specify an alternative input file than the default
@item --manual     
(-m)       - Generate reference manual from internal data
@item --manpage
(-M)       - Generate reference manpage from internal data
@item --stories
(-z @var{value}) - Look up stories for a given topic on the command line
@item --syntax
(-S @var{value}) - Print a syntax summary of the optional keyword or this CFEngine version
@item --topics
(-T)       - Show all topic names in CFEngine
@item --test
(-t @var{value}) - Generate test data
@item --removetest
(-r)       - Remove test data
@item --updatetest
(-u)       - Update test data

@end table
Debug levels: 1=parsing, 2=running, 3=summary, 4


@c **********************************************************************
@c SECTION
@c **********************************************************************

@node cf-key,  , cf-know - CFEngine's knowledge agent, Command reference
@section cf-key

@table @samp

@item --help       
(-h)       - Print the help message
@item --debug      
(-d @var{value}) - Set debugging level 0,1,2,3
@item --verbose    
(-v)       - Output verbose information about the behaviour of the agent
@item --version    
(-V)       - Output the version of the software
@item --output-file       
(-f @var{value}) - Specify an alternative output file than the default (localhost.*)
@item --show-hosts
(-s)       - Show lastseen hostnames and IP addresses
@item --remove-keys
(-r @var{value}) - Remove keys for specified hostname/IP from lastseen database 
@item --print-digest
(-p @var{pubkeyfile}) - Print digest of the specified public key file
@item --trust-key
(-t @var{pubkeyfile}) - Make cf-serverd/cf-agent trust the specified public key
@end table




@c =========================================================================
@c @node Index, CFEngine Methods, Top
@c @unnumbered Concept Index
@c @printindex cp
@c =========================================================================

@ifhtml
@html
<a name="Contents">
@end html
@end ifhtml

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye
