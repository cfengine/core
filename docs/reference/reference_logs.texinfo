
CFEngine writes numerous logs and records to its private workspace,
referred to as @file{WORKDIR}. This chapter makes some brief notes
about these files. CFEngine approaches monitoring and reporting from
the viewpoint of scalability so there is no default centralizatio of
reporting information, as this is untenable for more than a few
hundred hosts. Instead, in the classic CFEngine way, every host
is reponsible for its own data. Solutions for centralization and
netwide reporting will be given elsewhere.

The filenames referred to in this section are all relative to the
CFEngine work directory @file{WORKDIR}.

@menu
* Embedded Databases::
* Text logs::
* Reports in outputs::
* Additional reports in commercical CFEngine versions::
* State information::
@end menu


@node Embedded Databases
@section Embedded Databases

Embedded datbases' file extensions will vary based on which library is used to
implement them; either Tokyo Cabinet (@code{.tcdb}), Quick Database
Manager (@code{.qdbm}), or Berkeley DB (@code{.db}). Converting one
database format to another is not handled by CFEngine, but there exist
external tools meant for that purpose.

@table @file
@item cf_Audit.tcdb    
A compressed database of auditing information. This file grows very large
is auditing is switched on. By default, only minor information about CFEngine runs
are recorded. This file should be archived and deleted regularly to avoid choking
the system.
@item cf_lastseen.tcdb       
A database of hosts that last contacted this host, or were contacted by this
host which includes the times at which they were last observed. 
@item cf_classes.tcdb  
A database of classes that have been defined on the current host, including
their relative frequences, scaled like a probability.

@item checksum_digests.tcdb
The database of hash values used in CFEngine's change management functions.
@item performance.tcdb
A database of last, average and deviation times of jobs recorded by @code{cf-agent}. 
Most promises take an immeasurablely short time to check, but longer
tasks such as command execution and file copying are measured by default.
Other checks can be instrumented by setting a @code{measurement_class}
in the @code{action} body of a promise.

@item stats.tcdb  
A database of external file attributes for change management functionality.

@item state/cf_lock.tcdb
A database of active and inactive locks and their expiry times. Deleting
this database will reset all lock protections in CFEngine.

@item state/history.tcdb  
Enterprise level versions of CFEngine maintain this long-term trend database.

@item state/cf_observations.tcdb  
This database contains the current state of the observational history
of the host as recorded by @code{cf-monitord}.

@item state/promise_compliance.tcdb  
Enterprise CFEngine (Nova and above) database of individual promise compliance history. 
The database is approximate because promise references can change as policy is
edited. It quickly approaches accuracy as a policy goes unchanged for more than a day.

@item state/cf_state.tcdb
A database of persistent classes active on this current host.

@item state/nova_measures.tcdb
Enterprise CFEngine (Nova and above) database of custom measurables.
@item state/nova_static.tcdb
Enterprise CFEngine (Nova and above) database of static system discovery data.
@end table

@node Text logs
@section Text logs

@table @file
@item promise_summary.log
A time-stamped log of the percentage fraction of promises kept after each run.
@item cf3.HOSTNAME.runlog
A time-stamped log of when each lock was released. This shows the last
time each individual promise was verified.
@item cfagent.HOSTNAME.log 
Although ambiguously named (for historical reasons) this log contains the current
list of setuid/setgid programs observed on the system. CFEngine warns about
new additions to this list. This log has been deprecated.

@item cf_value.log
A time stamped log of the business value estimated from the execution of the automation
system.

@item cf_notkept.log
A list of promises, with handles and comments, that were not kept. Nova enterprise versions only. 

@item cf_repaired.log
A list of promises, with handles and comments, that were repaired. Nova enterprise versions only. 

@item reports/*
Enterprise versions of CFEngine use this directory as a default place for
outputting reports.

@item reports/class_notes
Class data in csv format for export to CMDB.

@item state/file_change.log
A time-stamped log of which files have experienced content changes
since the last observation, as determined by the hashing algorithms in
CFEngine.

@item state/vars.out
Enterprise level versions of CFEngine use this log to communicate variable
data.

@item state/*_measure.log
Enterprise level versions of CFEngine maintain user-defined logs based on
specifically promised observations of the system.


@end table

@node Reports in outputs
@section Reports in outputs

The @file{outputs} directory contains a time-stamped list of outputs
generated by @code{cf-agent}. These are collected by @code{cf-execd}
and are often E-mailed as reports. However, not all hosts have an
E-mail capability or are online, so the reports are kept here. Reports
are not tidied automatically, so you should delete these files after a
time to avoid a build up.


@node Additional reports in commercical CFEngine versions
@section Additional reports in commcerical CFEngine versions




@node State information
@section State information

The CFEngine components keep their current process identifier number
in `pid files' in the work directory: e.g.

@verbatim
cf-execd.pid
cf-serverd.pid
@end verbatim

Most other state data refer to the running condition of the host and
are generated by @code{cf-monitord} (@code{cfenvd} in earlier versions
of CFEngine).

@table @file
@item state/env_data
This file contains a list of currently discovered classes and variable values
that characterize the anomaly alert environment. They are altered by the monitor
daemon.
@item state/all_classes
A list of all the classes that were defined the last time that CFEngine
was run. 
@item state/cf_*
All files that begin with this prefix refer to cached data that were observed
by the monitor daemon, and may be used by @code{cf-agent} in @code{reports} with @code{showstate}.
@end table


