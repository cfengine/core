#######################################################
#
# Replace a pattern and use match.0
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "testfile" string => "$(G.testfile)";
  files:
      "$(testfile)"
        create => "true",
        edit_defaults => empty,
        edit_line => insert_lines( "one=foo$(const.n)two=bar$(const.n)three=3");
}

bundle agent test {
  meta:
      "description" -> { "CFE-3123" }
        string => "Test that replace_patterns (via set_line_based) behaves as expected when combined with edit_defaults empty_file_before_editing => true (via empty)";

      "test_soft_fail"
        string => "any",
        meta => { "CFE-3123" };

  vars:
    any::
      "config[one]" string => "1";
      "config[two]" string => "2";
      "config[three]" string => "3";

  files:
    any::
      "$(init.testfile)"
        create => "true",
        edit_defaults => empty,
        edit_line => set_line_based("$(this.bundle).config", "=", "=", ".*", "\s*#\s*");
}

bundle agent check
{
  vars:
      "result" data => readenvfile( $(init.testfile) );

  classes:
      "ok"
        and => {
                 strcmp( "1", "$(result[one])" ),
                 strcmp( "2", "$(result[two])" ),
                 strcmp( "3", "$(result[three])" ),
      };

  methods:

    ok::
      "Pass" usebundle => dcs_pass($(this.promise_filename));

    !ok::
      "FAIL" usebundle => dcs_fail($(this.promise_filename));

  reports:

    DEBUG|EXTRA::
      "Expected each key to have numeric values" if => "!ok";
      "$(with)" with => string_mustache( "{{%-top-}}", @(result) );
      "$(init.testfile)" printfile => my_cat( $(this.promiser) );

}

body printfile my_cat(file)
# @brief Report the contents of a file
# @param file The full path of the file to report
{
        file_to_print => "$(file)";
        number_of_lines => "inf";
}
