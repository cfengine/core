\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{CFEngineFrontPage}

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename st-bdma.info
@settitle BDMA
@setchapternewpage odd
@c %** end of header

@titlepage
@title BDMA
@subtitle A CFEngine Special Topics Handbook
@author CFEngine AS


@page

@cartouche
@quotation
Build, Deploy, Manage, Audit is a simple and traditional model of the
IT infrastructure lifecycle, based on human workflows and
processes. CFEngine's approach to the IT infrastructure is somewhat
different, but the four pillars of the lifecycle can still be
addressed in the framework of automation. This guide explains how to
think about the IT infrastructure lifecycle when using CFEngine.
@end quotation
@end cartouche

@vskip 0pt plus 1filll
Copyright @copyright{} 2009 CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                      CFEngine is a language based tool specifically
                      designed for configuring and maintaining
                      Unix-like operating systems attached
                      to a TCP/IP network.
@end direntry
@end ifinfo

@ifnottex
@node Top, What is BDMA?, (dir), (dir)
@top BDMA
@menu
* What is BDMA?::               
* Stem cell hosts::             
* Recommendations for Build::   
* Recommendations for Deploy::  
* Recommendations for Manage::  
* Recommendations for Audit::   
* Summary BDMA workflow::       
@end menu
@end ifnottex
@iftex
@contents
@end iftex

@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>
<h2>Summary of contents</h2>
@end html
@end ifhtml

@node What is BDMA?, Stem cell hosts, Top, Top
@unnumberedsec What is BDMA?
@sp 1

The four mission phases are sometimes referred to as 

@table @emph
@item Build
A mission is based on decisions and resources that need to
be put assembled or `built' before they can be applied. This is
the planning phase.

In CFEngine, what you build is a template of proposed promises for the
machines in an organization such that, if the machines all make and
keep these promises, the system will function seamlessly as
planned. This is how it works in a human organization, and this is how
is works for computers too.

@item Deploy
Deploying really means launching the policy into production.  In
CFEngine you simply publish your policy (in CFEngine parlance these
are `promise proposals') and the machines see the new proposals and
can adjust accordingly. Each machine runs an agent that is capable of
keeping the system on course and maintaining it over time without
further assistance.

@item Manage
Once a decision is made, unplanned events will occur. Such incidents
traditionally set off alarms and humans rush to make new transactions
to repair them. Under CFEngine guidance, the autonomous agent manages
the system, and humans only manage knowledge and have to deal with
rare events that cannot be dealt with automatically.

@item Audit
CFEngine performs continuous analysis and correction, and commercial
editions generate explicit reports on mission status.  Users can sit
back and examine these reports to check mission progress, or examine
the current state in relation to the knowledge map for the mission.

@end table

@image{BDMA_model,12cm,,,,png}


@node Stem cell hosts, Recommendations for Build, What is BDMA?, Top
@unnumberedsec Stem cell hosts
@sp 1
At CFEngine we talk about stem cell hosts. A stem cell host is a generic
foundation of software that is the @i{necessary and sufficient} basis for
any future purpose. To make a finished system from this stem cell host,
you only have to `differentiate' the system from this generic basis by running CFEngine. 

Differentiation of hosts involves adding or subtracting software packages,
and/or configuring the basic system.  This strategy is cost effective,
as you do not have to maintain more than one base-line `image' for
each operating system; rather, you use CFEngine to implement and
maintain the morphology of the differences. Stem cell hosts are
normally built using PXE services by booting and installing automatically
from the network.

@node Recommendations for Build, Recommendations for Deploy, Stem cell hosts, Top
@unnumberedsec Recommendations for Build
@sp 1
There are many approaches to building complete systems.
When you use CFEngine, you should try to progress from
thinking only about putting bytes on disks, to planning
a long term set of promises to keep.

@itemize
@item What services do you want to support?
@item What promises do you want to keep concerning these services?
@item Are these promises sustainable and convergently implementable?
@item Formulate proposed intentions in the form of CFEngine promises.
@item Discuss the impact of these in your team of CFEngine Mission Specialists (more than one pair of eyes).
@end itemize

It is worth spending extra time in the build planning to simplify
your system as much as possible. A clear formulation here will save
time both in maintenance and training later, as employees come and go.
The better you understand your intentions, the simpler the system will be.

We cannot emphasize enough the value of the promise discipline. If you can
formulate your requirements as promises to be kept, you have identified not only
what, where, when and how, but also who is responsible and affected by every promise.

Building systems is resource intensive. CFEngine works well with @b{rPath}, allowing optimized
build that can shave off many minutes from the build time for machines. CFEngine can then take over where
rPath leaves off, performing surgically precise customization.

@node Recommendations for Deploy, Recommendations for Manage, Recommendations for Build, Top
@unnumberedsec Recommendations for Deploy
@sp 1

Deploying a policy is a potentially dangerous operation, as it will
lead to change, with associated risk. Side-effects are common, and
often result from incomplete planning. (See the CFEngine Special
Topics Guide on @i{Change Management}).

The following sequence forms a checklist for deploying successful policy change:
@enumerate
@item Discuss the impact of changes in the team.
@item Commit the changes to promises in version control, e.g. subversion.
@item Make a change in the CFEngine input files.
@item Run the configuration through @samp{cf-promises --inform} to check for problems.
@item Move the policy to a test system.
@item Try running the configuration in dry-run model: @samp{cf-agent --dry-run}
@item Try running the policy once on a single system, being observant of unexpected behaviour.
@item Try running the policy on a small number of systems.
@item Construct a test environment and examine the effect of these promises in practice.
@item Move the policy to the production environment.
@item If possible, test on one or a few machines before releasing for general use.
@end enumerate

CFEngine recommends a process of many small incremental changes, rather than large
high-risk deployments.

CFEngine allows you to apply changes at a much finer level of granularity than
any package based management system, thus it complements basic package management with
its deployment and real time repair (see next section).


@node Recommendations for Manage, Recommendations for Audit, Recommendations for Deploy, Top
@unnumberedsec Recommendations for Manage
@sp 1

Managing systems is an almost trivial task with CFEngine. Once a model
for desired state has been created, you just sit back and watch.  You
should be ready for `hands free' operation. No one should make changes
to the system by hand. All changes should follow the deployment
strategy above.

All that remains to do is wait for email alerts from CFEngine and to
browse reports about the system state. In CFEngine Nova, these reports
are generated automatically and integrated into the system knowledge
base.
 
Most email alerts from CFEngine are information only. It is possible
(but not recommended) to make CFEngine very verbose about its
operations. It is common to look for confirmation early in the phase
of adopting CFEngine, as trust in the software is building. Eventually
users turn off the verbosity and the default is for CFEngine to send
as little email or output as possible.

@cartouche
Consider a single line E-mail, in confirmation of a change, arriving
from 1000 computers in a single day. Learning to trust the software
saves unnecessary communication and needless human involvement.
The Nova Mission Portal makes notification and alerting largely
unnecessary.
@end cartouche

@node Recommendations for Audit, Summary BDMA workflow, Recommendations for Manage, Top
@unnumberedsec Recommendations for Audit
@sp 1

Auditing systems is a continuous process when using CFEngine
Nova. Report data are collected on a continuous and distributed
basis. These data are then collected from each distributed location
according to a schedule of your choosing to collate and integrate the
reports from all systems.

The reports CFEngine provides are meant to offer simple summaries of
the kind of information administrators need about their environment,
avoiding unnecessary detail.

@table @emph
@item Available patches report   
Patches already installed on system if available.
@item Classes report   
User defined classes observed on the system -- inventory data.
@item Compliance report   
Total summary of host compliance, all promises aggregated over time.
@item File_changes report   
Latest observed changes to system files with time discovered.
@item File_diffs report   
Latest observed differences to system files, in a simple diff format.
@item Hashes report   
File hash values measured (change detection).
@item Installed patches report   
Patches not yet installed, but published by vendor if available.
@item Installed software report   
Software already installed on system if available.
@item Lastseen report   
Time and frequency of communications with peers, host reliability.
@item Micro-audit report   
Generated by CFEngine self-auditing. This report is not aggregated.
@item Monitor summary report   
Pseudo-real-time measurement of time series data.
@item Performance report   
Time cost of verifying system promises.
@item Promise report   
Per-promise average compliance report over time.
@item Promises not kept report   
Promises that were recently un-kept.
@item Promises repaired report   
Promises that were recently kept by repairing system state.
@item Setuid report   
Known setuid programs found on system.
@item Variables report   
Current variable values expanded on different hosts.
@end table

@node Summary BDMA workflow,  , Recommendations for Audit, Top
@unnumberedsec Summary BDMA workflow
@sp 1

@enumerate
@item Define a stem cell host template
@item Set up PXE network booting and kickstart / jumpstart OS tools with CFEngine integrated
@item Get CFEngine running and updating on all hosts, but making no system changes.
@item Define a service catalogue.
@item Discuss and formulate a policy increment, thinking convergence at all times
@item Publish (deploy) the policy.
@item Follow emails and reports in the CFEngine Knowledge Map (Manage).
@item Adjust policy if necessary, following procedures for change management (Manage)
@item View reports (or enjoy the silence) to audit system state.
@end enumerate

CFEngine works well with package based management software. Users of
rPath, for example, can achieve substantially improved efficiency in
the build phase. CFEngine takes over where package based systems leave
off, providing an unprecedented level of control `hands free'.

@ifhtml
@html
<a name="Contents">
@contents
@end html
@end ifhtml

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https:// 
ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google- 
analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye

