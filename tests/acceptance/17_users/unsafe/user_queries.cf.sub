bundle common user_tests
{
  vars:
    !windows::
      "group1" string => "bin";
      "group2" string => "sys";
      "gid1" string => "2";
      "gid2" string => "3";

    windows::
      "group1" string => "Users";
      "group2" string => "Administrators";
}

bundle agent remove_stale_groups
{
  # When we create a user and change its primary GID afterwards, its original
  # group may linger and cause problems later.
  commands:
      "groupdel johndoe"
        contain => in_shell;
}

bundle agent user_exists(user, true_class, false_class)
{
  commands:
    !windows::
      "$(G.grep) '^$(user):' /etc/passwd"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");
  vars:
    windows::
      "output" string => execresult("net user $(user)", "useshell");
      "reg" string => escape("$(user)");
  classes:
    windows::
      "$(true_class)" expression => regcmp(".*$(reg).*", "$(output)"),
        scope => "namespace";
      "$(false_class)" not => regcmp(".*$(reg).*", "$(output)"),
        scope => "namespace";
}

bundle agent user_has_uid(user, uid, true_class, false_class)
{
  commands:
    !windows::
      "$(G.grep) '^$(user):[^:]*:$(uid):' /etc/passwd"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  reports:
    windows::
      "Cannot check uid on Windows!";
}

bundle agent user_is_in_primary_group(user, group, true_class, false_class)
{
  vars:
    !windows::
      "no" int => getfields("$(group):.*", "/etc/group", ":", "gid_number");

  commands:
    !windows::
      "$(G.grep) '^$(user):[^:]*:[^:]*:$(gid_number[3]):' /etc/passwd"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  methods:
    windows::
      "redirect" usebundle => user_is_in_secondary_group("$(user)", "$(group)", "$(true_class)", "$(false_class)");
}

bundle agent user_is_in_secondary_group(user, group, true_class, false_class)
{
  commands:
    !windows::
      "$(G.grep) -E '^$(group):[^:]*:[^:]*:[^:]*,?$(user)(,|$)' /etc/group"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  vars:
    windows::
      "output" string => execresult("net user $(user)", "useshell");
      "reg" string => escape("$(group)");
  classes:
    windows::
      "$(true_class)" expression => regcmp(".*Local Group Memberships *(\*[a-zA-Z0-9]* *)* *$(reg).*", "$(output)"),
        scope => "namespace";
      "$(false_class)" not => regcmp(".*Local Group Memberships *(\*[a-zA-Z0-9]* *)* *$(reg).*", "$(output)"),
        scope => "namespace";
}

bundle agent user_is_in_any_secondary_group(user, true_class, false_class)
{
  commands:
    !windows::
      "$(G.grep) -E '^[^:]*:[^:]*:[^:]*:[^:]*,?$(user)(,|$)' /etc/group"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  vars:
    windows::
      "output" string => execresult("net user $(user)", "useshell");
  classes:
    windows::
      "$(true_class)" expression => regcmp(".*Local Group Memberships *\*None.*", "$(output)"),
        scope => "namespace";
      "$(false_class)" not => regcmp(".*Local Group Memberships *\*None.*", "$(output)"),
        scope => "namespace";
}

bundle agent user_has_home_dir(user, home_dir, true_class, false_class)
{
  commands:
    !windows::
      "$(G.grep) '^$(user):[^:]*:[^:]*:[^:]*:[^:]*:$(home_dir):' /etc/passwd"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  vars:
    windows::
      "output" string => execresult("net user $(user)", "useshell");
      "reg" string => escape("$(home_dir)");
  classes:
    windows::
      "$(true_class)" expression => regcmp(".*Home directory *$(reg).*", "$(output)"),
        scope => "namespace";
      "$(false_class)" not => regcmp(".*Home directory *$(reg).*", "$(output)"),
        scope => "namespace";
}

bundle agent user_has_shell(user, shell, true_class, false_class)
{
  commands:
    !windows::
      "$(G.grep) '^$(user):[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:$(shell)$' /etc/passwd"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  reports:
    windows::
      "Cannot check shell on Windows!";
}

bundle agent user_has_description(user, description, true_class, false_class)
{
  commands:
    !windows::
      "$(G.grep) '^$(user):[^:]*:[^:]*:[^:]*:$(description):' /etc/passwd"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  vars:
    windows::
      "output" string => execresult("net user $(user)", "useshell");
  classes:
    windows::
      "$(true_class)" expression => regcmp(".*Full Name *$(description).*", "$(output)"),
        scope => "namespace";
      "$(false_class)" not => regcmp(".*Full Name *$(description).*", "$(output)"),
        scope => "namespace";
}

bundle agent user_has_password(user, password, true_class, false_class)
{
  reports:
    !windows::
      "Cannot test password on Unix!";

  classes:
    windows.has_psexec::
      "$(true_class)" expression => returnszero("$(G.psexec) -u $(user) -p $(password) $(sys.cf_agent) -h", "noshell"),
        scope => "namespace";
      "$(false_class)" not => returnszero("$(G.psexec) -u $(user) -p $(password) $(sys.cf_agent) -h", "noshell"),
        scope => "namespace";
  reports:
    windows.!has_psexec::
      "Need PsExec.exe tool from PSTools to test password!";
}

bundle agent user_has_password_hash(user, hash, true_class, false_class)
{
  vars:
    "escaped_hash" string => escape("$(hash)");

  commands:
    !windows::
      "$(G.grep) '^$(user):$(escaped_hash):' /etc/shadow"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  reports:
    windows::
      "Cannot test password hash on Windows!";
}

bundle agent user_get_password_hash(user)
{
  vars:
    !windows::
      "hash" string => execresult("$(G.grep) '^$(user):' /etc/shadow | $(G.sed) -e 's/[^:]*:\([^:]*\):.*/\1/'", "useshell");

  reports:
    windows::
      "Cannot get password hash on Windows!";
}

bundle agent user_is_locked(user, true_class, false_class)
{
  commands:
    !windows::
      # Notice the [^:] without * at the end. That field (expiry) should be *something*.
      "$(G.grep) '^$(user):![^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:][^:]*:' /etc/shadow"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  vars:
    windows::
      "output" string => execresult("net user $(user)", "useshell");
  classes:
    windows::
      "$(true_class)" expression => regcmp(".*Account active *No.*", "$(output)"),
        scope => "namespace";
      "$(false_class)" not => regcmp(".*Account active *No.*", "$(output)"),
        scope => "namespace";
}

bundle agent user_is_unlocked(user, true_class, false_class)
{
  commands:
    !windows::
      # Notice the field at the end. That field (expiry) should be gone or zero.
      "$(G.egrep) '^$(user):[^:!]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:(|0):' /etc/shadow"
        contain => no_output_shell,
        classes => on_success("$(true_class)", "$(false_class)");

  vars:
    windows::
      "output" string => execresult("net user $(user)", "useshell");
  classes:
    windows::
      "$(true_class)" expression => regcmp(".*Account active *Yes.*", "$(output)"),
        scope => "namespace";
      "$(false_class)" not => regcmp(".*Account active *Yes.*", "$(output)"),
        scope => "namespace";
}

body classes on_success(true_class, false_class)
{
  promise_repaired => { "$(true_class)" };
  repair_failed    => { "$(false_class)" };
  cancel_notkept   => { "$(true_class)" };
  cancel_repaired  => { "$(false_class)" };
}

body contain no_output_shell
{
  no_output => "true";
  useshell => "useshell";
}
