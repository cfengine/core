#######################################################
#
# Create a file, expect simultaneous link with hardlink and move_obstructions
# to succeed
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

bundle common g
{
vars:
        "sourcefile" string => "$(G.testfile).SOURCE";

        # This extracts the inode number
        "command" string => 'printf "%d", (stat("$(G.testfile)"))[1]';

}

#######################################################

bundle agent init
{
files:
        "$(G.testfile)"
            delete => init_delete;

        "$(g.sourcefile)"
            create => "true";
}

body delete init_delete
{
        dirlinks => "delete";
        rmdirs   => "true";
}

#######################################################

bundle agent test
{
files:
        "$(G.testfile)"
            create => "true",
            move_obstructions => "true",
            link_from => test_link;
}

body link_from test_link
{
        source => "$(g.sourcefile)";
        link_type => "hardlink";
}

#######################################################

bundle agent check
{
vars:
        "source_command" string => 'printf "%d", (stat("$(g.sourcefile)"))[1]';
        "source_ino" string => execresult(
            "/usr/bin/perl -le '$(source_command)'",
            "noshell");

        "result" string => execresult(
            "/usr/bin/perl -le '$(g.command)'",
            "noshell");

classes:
        "ok" expression => strcmp("$(source_ino)", "$(result)");

reports:
    DEBUG::
        "expected: '$(source_ino)'";
        "got:      '$(result)'";
    ok::
        "$(this.promise_filename) Pass";
    !ok::
        "$(this.promise_filename) FAIL";
}

