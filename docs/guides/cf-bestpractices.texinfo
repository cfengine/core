\input texinfo-altfont
\input texinfo-logo
\input texinfo
@selectaltfont{cmbright}
@setlogo{NewLogo} 

@c *********************************************************************
@c
@c  This is a TEXINFO file. It generates both TEX documentation and
@c  the "on line" documentation "info" files.
@c
@c  The file is structured like a programming language. Each chapter
@c  starts with a chapter comment.
@c
@c  Menus list the subsections so that an online info-reader can parse
@c  the file hierarchically.
@c
@c ***********************************************************************
@c %** start of header
@setfilename cf-bestpractices.info
@settitle CFEngine Best Practices
@setchapternewpage odd
@c %** end of header

@titlepage
@title CFEngine Best Practices
@subtitle A CFEngine AS workbork
@author CFEngine AS

@c @smallbook
    

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2008 CFEngine AS

@end titlepage


@c *************************** File begins here ************************


@ifinfo
@dircategory CFEngine Training
@direntry
* CFEngine Modularization:
                        CFEngine is a language based tool specifically
                        designed for configuring and maintaining
                        Unix-like operating systems attached
                        to a TCP/IP network.
@end direntry
@end ifinfo

@ifnottex
@node Top, Best practices, (dir), (dir)
@top CFEngine-Modularization
@end ifnottex


@ifhtml
@html
<a href="#Contents"><h1>COMPLETE TABLE OF CONTENTS</h1></a>

<h2>Summary of contents</h2>

@end html
@end ifhtml

@c **********************************************************************
@c CHAPTER
@c **********************************************************************


@menu
* Best practices::              
* The Promise Matrix::          
* Things to remember when writing promises::  
@end menu

@c **********************************************************************
@node Best practices, The Promise Matrix, Top, Top
@chapter Best practices

Who decides best practice? Who gets to say what is best for whom and
under what circumstances? In many cases this is an ad hoc individual,
or perhaps (worse) a committee, more concerned with concensus building
that practicality.

We would like to begin by saying that we don't believe in the concept
of @i{best} practice, however perhaps we can refer to Pretty Good
Practice, i.e. Useful Experience. That is the spirit in which we present our
thoughts in this document.

@c **********************************************************************
@node The Promise Matrix, Things to remember when writing promises, Best practices, Top
@chapter The Promise Matrix

Let us oversimplify just a little to describe what we believe is the basic
problem.

The management of a distributed system can be thought of as the
population of a matrix (table) of `things to do' versus `where to do
them', i.e. on which machines to execute which processes. This
matrix is what is sometimes referred to as orchestration, or choreography:

@image{matrix1,12cm,,The Matrix,png}

The CFEngine version of this is more general and more powerful. To
begin with, we describe promises which are not just tasks, but
maintainance processes. Then, instead of individual machines, we are
able to put together any kind of (possibly overlapping) set of
machines into a `class'. 

@image{matrix2,12cm,,The Matrix,png}

@menu
* Avoid hierarchical arrangements::  
* Defining effective classes::  
* Classifying machines::        
* Bundling under a class::      
@end menu

@node Avoid hierarchical arrangements, Defining effective classes, The Promise Matrix, The Promise Matrix
@section Avoid hierarchical arrangements

Hierarchies are a bad way to model organizations. Even though history
has favoured hierarchical organization, almost no real organization is
trul hierarchical. Indeed, strict hierarchies tend to fail in most
cases because they force things into a tree of isolated
leaf-categories.  Networks (like the internet) are successful because
they can branch like trees, but allow cross connected and overlapping
membership of categories. 

Our first advice is:

@itemize
@item Create the classes that you need to represent your organization. 

Put out of your mind all thoughs about hierarchy and Object
Orientation. If they are natural, they will emerge by themselves. If
they are not, they will just get in your way. If you try to be strict
in categorization, you will just end up making more exceptions to the
rule than the rule itself.

@item Use many classes with descriptive names.

This is how you model and understand cooperation in your organization.

@end itemize

Many clients have a significant fraction of their total configuration
dedicated to defining appropriate classes.


@node Defining effective classes, Classifying machines, Avoid hierarchical arrangements, The Promise Matrix
@section Defining effective classes

One idea for best practice is this: we want to make the smallest
number of classes that cover an organization. This sounds like a nice
obsessive-compulsion for optimization, and it appeals to nit-pickers;
however we advise against exessive optimization. Comfort and pedagogy
are more important characteristics to nurture.

@enumerate

@item The main thing we want to avoid is having to maintain the same
information in many locations.  If we can, we would like to have a
little raw information and use logic and @i{reasoning} to derive
classes from these. Fortunately CFEngine does a lot of reasoning in
advance, providing you with a rich list of classes on which to base
decisions.

@item Remember also that you can define your own classes by testing the
system with functions like @code{fileexists()}, @code{filesexist},
@code{hashmatch()}, etc., which detect conformance with particular
patterns.

@item A lot of information is contained in lists.  Make use of existing
lists in databases like NIS, LDAP and SQL databases. The may be accessed
by special functions like @code{ldaplist}, @code{hostinnetgroup}.

@item There are two strategies to making lists, much like `allow' and `deny'
strategies in access control security.

@itemize
@item Specify the individual entities.
@item Specify the exceptions to a general rule.
@end itemize

There are general classes (all encompassing) like @samp{any}, and @samp{solaris}.
Then there are specific classes like the name of a host, or the IP address.

@end enumerate


@node Classifying machines, Bundling under a class, Defining effective classes, The Promise Matrix
@section Classifying machines

There are different approaches to classifying machines:

@itemize
@item By IP address, or subnet.

This seems simple but does not easily capture today's distributed organizations.

@item By netgroup or LDAP list.

This has the advantage of being managed by a specialist in the organization, so it
makes use of knowledge about the organization.

@end itemize


@node Bundling under a class,  , Classifying machines, The Promise Matrix
@section Bundling under a class -- making use of patterns


CFEngine's ability to define methods based on parameterized bundles of
code is a powerful way to reduce the total number of specific promises
into generic patters. Whenever possible, we recommend writing
generic promises and re-using them by iterating over lists,
or applying parameter sets to different classes, e.g.

@verbatim

 domain_01::

  "dep1" slist => { "c:\WINDOWS\system32\msiexec.exe" };

  "dep2" slist => { "c:\WINDOWS\system32\msiexec.exe", "c:\Program Files\cf_dummy1" };

  "dep3" slist => { "c:\WINDOWS\system32\msiexec.exe", "c:\Program Files\cf_dummy1", "c:\Program Files\cf_dummy2" };


 domain_02::

  "dep1" slist => { "c:\WINDOWS\system32\msiexec.exe" };

  "dep2" slist => { "c:\WINDOWS\system32\msiexec.exe", "c:\Program Files\cf_dummy2" };

methods:

 # perform the actual installation with dependency checking

 domain_01::

  "any"  usebundle => install_software("cf_dummy1.msi","cf_dummy1",@(Trial1.dep1));
  "any"  usebundle => install_software("cf_dummy2.msi","cf_dummy2",@(Trial1.dep2));
  "any"  usebundle => install_software("cf_dummy3.msi","cf_dummy3",@(Trial1.dep3));

 domain_02::

  "any"  usebundle => install_software("cf_dummy2.msi","cf_dummy2",@(Trial1.dep1));
  "any"  usebundle => install_software("cf_dummy1.msi","cf_dummy1",@(Trial1.dep2));

@end verbatim


@c **********************************************************************
@node Things to remember when writing promises,  , The Promise Matrix, Top
@chapter Things to remember when writing promises




When writing promises, get into the habit of giving every promise a comment
that explains its intention.

Also, give related promises @i{handles}, or labels that can be used to
refer to them by.

@verbatim

files:

  "/var/cfengine/inputs" 

    handle => "update_policy",

    perms => system("600"),
    copy_from => mycopy("$(master_location)","$(policy_server)"),
    depth_search => recurse("inf"),
    file_select => input_files,
    action => immediate;
   
@end verbatim
If a promise affects another promise in some way, you can make the affected
promise one of the promisees, like this:

@verbatim

access:

  "/master/CFEngine/inputs" -> { "update_policy", "other_promisee" },

    handle  => "serve_updates",

    admit   => { "217.77.34.*" };

@end verbatim

Conversely, if a promise might depend on another in some (even indirect) way, document this too.

@verbatim

files:

  "/var/cfengine/inputs" 

    handle     => "update_policy",
    depends_on => {"serve_updates"},

    perms => system("600"),
    copy_from => mycopy("$(master_location)","$(policy_server)"),
    depth_search => recurse("inf"),
    file_select => input_files,
    action => immediate;


@end verbatim

Get into the habit of adding the cause-effect lines of influence.
Enterprise editions of CFEngine will track the dependencies between these
promises and map out impact analyses.


@c =========================================================================
@c @node Index,  , CFEngine Methods, Top
@c @unnumbered Concept Index
@c @printindex cp
@c =========================================================================

@ifhtml
@html
<a name="Contents">
@end html
@end ifhtml

@contents

@ifhtml
@html
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2576171-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
@end html
@end ifhtml

@bye

