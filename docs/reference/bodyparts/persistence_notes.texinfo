
@i{History}: Was introduced in 3.4.0, Nova 2.2.0 (2012)

This feature can be used to avoid recomputing expensive classes
calculations on each invocation. If a class discovered is essentially
constant or only slowly varying (like a hostname or alias from a
non-standard naming facility)

For example, to create a conditional inclusion of costly class
definitions, put them into a separate bundle in a file @file{classes.cf}.
@verbatim
# promises.cf

body common control 
{
cached_classes::
  bundlesequence => { "test" };

!cached_classes::
  bundlesequence => {  "setclasses", "test" };

!cached_classes::
  inputs => { "classes.cf" };
}
 

bundle agent test
{
reports:

  !my_cached_class::
   "no cached class";

  my_cached_class::
    "cached class defined";
}
 
@end verbatim
@noindent Then create @file{classes.cf}
@verbatim
# classes.cf

bundle common setclasses
{
classes:

  "cached_classes"            # timer flag 
         expression => "any",
        persistence => "480";

  "my_cached_class" 
                or => { ...long list or heavy function... } ,
       persistence => "480";

}

@end verbatim
