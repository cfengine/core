#######################################################
#
# Create a file, expect simultaneous link with relative and move_obstructions
# to succeed
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

bundle common g
{
vars:
        # This extracts the inode number of the linked file
        "command" string => 'printf "%d", (stat("$(G.testfile)"))[1]';
        # This extracts the inode number of the symlink
        "Lcommand" string => 'printf "%d", (lstat("$(G.testfile)"))[1]';

        "source" string => "/etc/group";
        "source_command" string => 'printf "%d", (stat("$(g.source)"))[1]';
        "source_ino" string => execresult(
            "/usr/bin/perl -le '$(g.source_command)'",
            "noshell");

        "target" string => "/etc/group";
}

#######################################################

bundle agent init
{
files:
        "$(G.testfile)"
            delete => init_delete;
}

body delete init_delete
{
        dirlinks => "delete";
        rmdirs   => "true";
}

#######################################################

bundle agent test
{
files:
        "$(G.testfile)"
            create => "true",
            move_obstructions => "true",
            link_from => test_link;
}

body link_from test_link
{
        source => "$(g.target)";
        link_type => "relative";
}

#######################################################

bundle agent check
{
vars:
        "result" string => execresult(
            "/usr/bin/perl -le '$(g.command)'",
            "noshell");
        "Lresult" string => execresult(
            "/usr/bin/perl -le '$(g.Lcommand)'",
            "noshell");

        # This tells us where the link points
        "Tcommand" string => 'print readlink "$(G.testfile)"';
        "link_target" string => execresult(
            "/usr/bin/perl -le '$(Tcommand)'",
            "noshell");

classes:
        "okL" not => strcmp("$(g.source_ino)", "$(Lresult)");
        "okT" not => strcmp("$(link_target)", "$(g.target)");
        "ok" and => { "okL", "okT",
                        strcmp("$(g.source_ino)", "$(result)"),
                        regcmp("\..*", "$(link_target)")
                    };

reports:
    DEBUG::
        "expected: '$(g.source_ino)'";
        "got:      '$(G.testfile)' => '$(link_target)'";
    ok::
        "$(this.promise_filename) Pass";
    !ok::
        "$(this.promise_filename) FAIL";
}

