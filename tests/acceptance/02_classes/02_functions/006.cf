#######################################################
#
# Test  grep()
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };   
      version => "1.0";
}

bundle common g
{
  vars:
      "dummy" string => "dummy";
}

#######################################################

bundle agent init
{
  vars:
      "dummy" string => "dummy";
}

#######################################################

bundle agent test
{
  vars:
      "dummy" string => "dummy";
}

#######################################################

bundle agent check
{
  vars:
      "zeros" slist => { "", "a", "bb", "ccc", "dddd" };
      "zeroz" slist => grep('\d.*', "zeros");
      "zero" string => join(",", "zeroz");

      "ones" slist => { "", "a", "bb", "ccc", "dddd" };
      "onez" slist => grep("c.*", "ones");
      "one" string => join(",", "onez");

      "twos" slist => { "", "a", "bb", "ccc", "dddd" };
      "twoz" slist => grep(".{1,2}", "twos");
      "two" string => join(",", "twoz");

      "threes" slist => { "", "a", "bb", "ccc", "dddd" };
      "threez" slist => grep("ccc", "threes");
      "three" string => join(",", "threez");

      "fours" slist => { "", "a", "bb", "ccc", "dddd" };
      "fourz" slist => grep(".+", "fours");
      "four" string => join(",", "fourz");

      "fives" slist => { "", "a", "bb", "ccc", "dddd" };
      "fivez" slist => grep(".*", "fives");
      "five" string => join(",", "fivez");

      "sixs" slist => { "", "a", "bb", "ccc", "dddd", '' };
      "sixz" slist => grep("^$", "sixs");
      "six" string => join(",", "sixz");

  classes:
      "ok1" expression => strcmp("", "$(zero)");
      "ok2" expression => strcmp("ccc", "$(one)");
      "ok3" expression => strcmp("a,bb", "$(two)");
      "ok4" expression => strcmp("ccc", "$(three)");
      "ok5" expression => strcmp("a,bb,ccc,dddd", "$(four)");
      "ok6" expression => strcmp(",a,bb,ccc,dddd", "$(five)");
      "ok7" expression => strcmp(",", "$(six)");
      "ok" and => { ok1, ok2, ok3, ok4, ok5, ok6, ok7 };

  reports:
      DEBUG.ok1:: "ok1";
      DEBUG.ok2:: "ok2";
      DEBUG.ok3:: "ok3";
      DEBUG.ok4:: "ok4";
      DEBUG.ok5:: "ok5";
      DEBUG.ok6:: "ok6";
      DEBUG.ok7:: "ok7";
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

#######################################################

bundle agent fini
{
  vars:
      "dummy" string => "dummy";
}
