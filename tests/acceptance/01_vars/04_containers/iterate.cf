#######################################################
#
# Test iteration of containers
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";

}

#######################################################

bundle agent init
{
  vars:
      "tests" container => parsejson('[ 0, 1, 2, 3, 4, 5, 6 ]');
}

#######################################################

bundle agent test
{
  vars:
      "found_$(init.tests)" string => "$(init.tests)";

  reports:
    DEBUG::
      "Found data $(init.tests) => $(found_$(init.tests))";
}

#######################################################

bundle agent check
{
  vars:
      "expected" container => parsejson('[ 0, 1, 2, 3, 4, 5, 6 ]');

      "actual_$(init.tests)" string => "$(test.found_$(init.tests))";

  classes:
      "ok_$(init.tests)" expression => regcmp("$(expected[$(init.tests)])",
                                              "$(actual_$(init.tests))");

      "ok" and => { ok_0, ok_1, ok_2, ok_3, ok_4, ok_5 };

  reports:
    DEBUG::
      "OK $(init.tests): Expected  '$(expected[$(init.tests)])' == '$(actual_$(init.tests))'"
      ifvarclass => "ok_$(init.tests)";

      "FAIL $(init.tests): Expected '$(expected[$(init.tests)])' <> '$(actual_$(init.tests))'"
      ifvarclass => "!ok_$(init.tests)";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
