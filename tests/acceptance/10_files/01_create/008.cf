#######################################################
#
# Create a file, check owners/mode, different order - assumption, this is run
# by root (see notes below)
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

bundle common g
{
vars:
        # This extracts the octal mode, and decimal nlink, uid, gid, size
        "command" string => 'printf "%o" . " %d" x 4, (stat("$(G.testfile)"))[2]&07777, (stat(_))[3..5,7]';
}

#######################################################

bundle agent init
{
files:
        "$(G.testfile)"
            delete => init_delete;
}

body delete init_delete
{
        dirlinks => "delete";
        rmdirs   => "true";
}

#######################################################

bundle agent test
{
vars:
    "mode" int => "0644";

files:
        "$(G.testfile)"
            create => "true",
            perms => test_perms;
}

body perms test_perms
{
mode => "$(test.mode)";
# In the POSIX model, one cannot create a file for another user, one can only
# create a file as you, and then change owners.  This test file will be created
# # by root, and thus the promise to be owned by root is kept.
linux::
    owners => { "sys", "root" };
    groups => { "sys", "root" };
freebsd::
    owners => { "bin", "root" };
    groups => { "sys", "wheel" };
!(linux|freebsd)::
    owners => { "undefined-please-fix" };
    groups => { "undefined-please-fix" };
}

#######################################################

bundle agent check
{
vars:
        "expect" string => "$(test.mode) 1 0 0 0";

        "result" string => execresult(
            "/usr/bin/perl -le '$(g.command)'",
            "noshell");

classes:
        "ok" expression => strcmp("$(expect)", "$(result)");

reports:
    DEBUG::
        "expected: '$(expect)'";
        "got:      '$(result)'";
    ok::
        "$(this.promise_filename) Pass";
    !ok::
        "$(this.promise_filename) FAIL";
}

