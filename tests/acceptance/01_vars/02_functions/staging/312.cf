#######################################################
#
# Test escape() - issue 689
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };   
  version => "1.0";
nova_edition::
  host_licenses_paid => "5";
}

bundle common g
{
vars:
        "dummy" string => "dummy";
}

#######################################################

bundle agent init
{
vars:
        "dummy" string => "dummy";
}

#######################################################

bundle agent test
{
vars:
        "t1" string => escape("1,2");
        "e1" string => "1,2";
        "t2" string => escape("1,2");
        "e2" string => "1\,2";
        "t3" string => escape("{1,2}");
        "e3" string => "\{1,2\}";
        "t4" string => escape("{1,2}");
        "e4" string => "\{1\,2\}";
}

#######################################################

bundle agent check
{
classes:
	"ok1" expression => regcmp("$(test.t1)", "$(test.e1)");
	"ok2" expression => regcmp("$(test.t2)", "$(test.e2)");
	"ok3" expression => regcmp("$(test.t3)", "$(test.e3)");
	"ok4" expression => regcmp("$(test.t4)", "$(test.e4)");
        "ok" and => { "ok1", "ok2", "ok3", "ok4" };

reports:
    DEBUG::
	"Comparing actual vs. expected:";
    DEBUG.ok1::
	"'$(test.t1)' is the same as '$(test.e1)'";
    DEBUG.!ok1::
	"'$(test.t1)' is NOT the same as '$(test.e1)'";
    DEBUG.ok2::
	"'$(test.t2)' is the same as '$(test.e2)'";
    DEBUG.!ok2::
	"'$(test.t2)' is NOT the same as '$(test.e2)'";
    DEBUG.ok3::
	"'$(test.t3)' is the same as '$(test.e3)'";
    DEBUG.!ok3::
	"'$(test.t3)' is NOT the same as '$(test.e3)'";
    DEBUG.ok4::
	"'$(test.t4)' is the same as '$(test.e4)'";
    DEBUG.!ok4::
	"'$(test.t4)' is NOT the same as '$(test.e4)'";
    ok::
	"$(this.promise_filename) Pass";

    !ok::
	"$(this.promise_filename) FAIL";
}
