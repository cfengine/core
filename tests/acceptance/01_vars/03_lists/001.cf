#######################################################
#
# Nested iterations of slists (the ordering is not guaranteed, so we sort)
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

#######################################################

bundle agent init
{
vars:
        "states" slist => { "actual", "expected" };

        "actual" string => "";

        "expected" string =>
"
a x
a y
a z
b x
b y
b z
c x
c y
c z";

files:
        "$(G.testfile).$(states)"
            create => "true",
            edit_line => init_insert("$(init.$(states))"),
            edit_defaults => init_empty;
}

bundle edit_line init_insert(str)
{
insert_lines:
        "$(str)";
}

body edit_defaults init_empty
{
        empty_file_before_editing => "true";
}

#######################################################

bundle agent test
{
files:
        "$(G.testfile).actual"
            edit_line => test_insert;

}

bundle edit_line test_insert
{
vars:
        "one" slist => { "a", "b", "c" };
        "two" slist => { "x", "y", "z" };

insert_lines:
        "$(one) $(two)";
}

#######################################################

bundle agent check
{

methods:
        "any" usebundle => default_sort("$(G.testfile).actual", "$(G.testfile).actual.sorted");
        "any" usebundle => default_sort("$(G.testfile).expected", "$(G.testfile).expected.sorted");
        "any" usebundle => default_check_diff("$(G.testfile).actual.sorted",
                                              "$(G.testfile).expected.sorted",
                                              "$(this.promise_filename)");
}

body contain check_in_shell
{
useshell => "true";
}

