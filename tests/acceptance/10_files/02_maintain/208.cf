#######################################################
#
# Copy a file, then ensure that subsequent create=true doesn't
# overwrite mode, size, group but DOES change owner, because
# we start with a non-registered user/group name.
#
#######################################################

body common control
{
  inputs => { "../../default.cf.sub" };
  bundlesequence  => { default("$(this.promise_filename)") };
  version => "1.0";
}

bundle common g
{
vars:
        # This extracts the octal mode, and decimal nlink, uid, gid, size
        "command" string => 'printf "%o" . " %d" x 4, (stat("$(G.testfile)"))[2]&07777, (stat(_))[3..5,7]';

        "source" string => "/etc/group";
        "source_command" string => 'printf "%d", (stat("$(g.source)"))[7]';
        "source_size" string => execresult(
            "/usr/bin/perl -le '$(g.source_command)'",
            "noshell");
}

#######################################################

bundle agent init
{
vars:
    any::
        "mode" int => "01751";
        "owner" string => "786756";
        "group" string => "786756";

    pass2::
        "result" string => execresult(
            "/usr/bin/perl -le '$(g.command)'",
            "noshell");

files:
        "$(G.testfile)"
            copy_from => init_copy("/etc/group"),
            perms => init_perms("$(mode)", "$(owner)", "$(group)"),
            classes => init_set_class("pass2");
}

body copy_from init_copy(file)
{
        source => "$(file)";
        compare => "mtime";
}

body perms init_perms(m, o, g)
{
mode => "$(m)";
owners => { "$(o)" };
groups => { "$(g)" };
}

body classes init_set_class(class)
{
promise_kept => { "$(class)" };
promise_repaired => { "$(class)" };
}

#######################################################

bundle agent test
{

files:
        "$(G.testfile)"
            create => "true",
            perms => test_perms;
}

body perms test_perms
{
# Mode is unspecified - should not change anything
owners => { "12349", "none" };        # Should change to 12349
# Group is unspecified - should not change anything
}


#######################################################

bundle agent check
{
vars:
        "result" string => execresult(
            "/usr/bin/perl -le '$(g.command)'",
            "noshell");

        "expected" string => "$(init.mode) 1 12349 $(init.group) $(g.source_size)";

classes:
        "ok" expression => strcmp("$(expected)", "$(result)");

reports:
    DEBUG::
        "init.result  is '$(init.result)'";
        "expected     is '$(expected)'";
        "check.result is '$(result)'";
    ok::
        "$(this.promise_filename) Pass";
    !ok::
        "$(this.promise_filename) FAIL";
}

