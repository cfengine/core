#+Title: Masterfiles Stage

This script is designed to run on the Policy Server and safely deploy
policy from upstream locations to a directory on the Policy Server for
distribution to clients.

[[file:images/basic_cfengine_architecture.png]]

As it is recommended to store and manage CFEngine policy in a version
control system like git or subversion, the typical and recommended
"upstream" source is a version control repository.

Deployment is done in a safe manner by first preparing masterfiles in
a staging area before deploying the policy to the directory where
clients [[https://docs.cfengine.com/latest/reference-promise-types-access.html#top][have access]] and expect it to be distributed from.

"Staging" is the process of preparing a temporary location with the
content of masterfiles sourced from an upstream location. Once the
temporary location has been updated it is validated and prepared for
deployment through various means.

The following are the common minimal staging actions:
  - =cf-promises= is used to validate the policy
    - This is done to try and prevent broken policy from being made
      available to remote agents
  - apply restrictive permissions
    - This is done because version control systems are notoriously
      poor at preserving correct and restrictive permissions.

Once the policy has been successfully staged the policy is deployed to
the final location for distribution to remote agents. In the most
simple environments this will be =$(sys.masterdir)= (typically
=/var/cfengine/masterfiles=) on the policy server.


* Current Features
:PROPERTIES:
:ID:       328afa2e-3e6d-4e87-87bc-0db71b009763
:END:
- Supported upstreams
  - =VCS_TYPE="GIT"=
  - =VCS_TYPE="GIT_POLICY_CHANNELS"=
  - =VCS_TYPE="SVN"=

* Dependencies
:PROPERTIES:
:ID:       b04a05f5-f84f-4c38-aed0-837e2ca6c10c
:END:
This script has the following dependencies
- bash
- rsync (SVN only)
- md5sum (SVN only)
- git|svn

git version =1.7.1= was used for testing =GIT= and =GIT_POLICY_CHANNELS=;
earlier versions of git may or may not work.

* Installation
:PROPERTIES:
:ID:       2aeaaa9b-1229-4c14-b130-6d86e370de42
:END:
Installation simply consists of saving =masterfiles-stage.sh= and its
supporting =common.sh= to the same directory on your policy server
and making sure that =masterfiles-stage.sh= is executable.

#+BEGIN_EXAMPLE
  wget https://raw.githubusercontent.com/cfengine/core/master/contrib/masterfiles-stage/masterfiles-stage.sh -O /var/cfengine/bin/masterfiles-stage.sh
  wget https://raw.githubusercontent.com/cfengine/core/master/contrib/masterfiles-stage/common.sh -O /var/cfengine/bin/common.sh
  chown root:root /var/cfengine/bin/masterfiles-stage.sh /var/cfengine/bin/common.sh
  chmod 555 /var/cfengine/bin/masterfiles-stage.sh
  chmod 444 /var/cfengine/bin/common.sh
#+END_EXAMPLE

*Warning:* The above commands may not work out of the box depending on
 how new your ssl certificates are.

* Configuration
:PROPERTIES:
:ID:       29bd6403-b885-4867-8b4e-a6605bf0dfd1
:END:

The =masterfiles-stage.sh= script takes options in order to specify the
directory where the masterfiles should be deployed after staging, as well as
the file that contains the parameters that should be used in order to interface
with the given upstream source implementation (git url, branch etc ..)
Run masterfiles-stage.sh --help to see exact option flags.

- =PARAMS= is the absolute path to the location of the
  parameter set that describes information needed by the selected
  staging method (currently referred to as =VCS_TYPE=). The format of
  the file is a simple KEY="VALUE". It is sourced by the
  =masterfiles-stage.sh= script. Each staging method or =VCS_TYPE=
  defined may define its own parameters. It is recommended that the
  parameters defined by the =VCS_TYPE= be prefixed with the =VCS_TYPE=
  so as not to conflict with other staging methods.

  Example PARAMS files can be found [[file:example_params/][here]].

- =MASTERDIR= is the abolute path to the location that you
  want masterfiles to be deployed to after successful staging.
  The default is =/var/cfengine/masterfiles= but please note that
  you can override this value either with an option on the command line,
  or by specifying the value of =MASTERDIR= inside of your =PARAMS= file.
  (The value specified in =PARAMS=, if there is one, will take precedence
  over an option specified on the command line.)


*** Reserved Parameters
:PROPERTIES:
:ID:       210cf03a-c8b3-47f3-916f-828c958bde5b
:END:
The following parameters are in use, be sure to avoid their collision
when developing new staging methods.

- =VCS_TYPE= :: The staging method to use
  - Currently supported: (=GIT=|=GIT_POLICY_CHANNELS=|=SVN=)

- =GIT_URL= :: The URL to the git repository
  - Example values:
    - =https://gitlab.com/nickanderson/masterfiles_demo_3.7.git=
    - =git@gitlab.com:nickanderson/masterfiles_demo_3.7.git=

- =GIT_REFSPEC= :: The git refspec to checkout.
  It can be a branch name, a tag name, a commit hash or a partial hash.
  - Example values:
    - =master=
    - =my_tag=
    - =88335d36b48c8808b12b48667a463182dc8d0338=
    - =cb375d0f=

- =dir_to_hold_mirror= :: The directory where the git mirror repo will
  be created for =GIT_POLICY_CHANNELS=.  (With =VCS_TYPE=GIT=, the repo
  is placed alongside of =ROOT=.)
  - Example value:
    - =/opt/cfengine=

- =channel_config= - a =bash= array containing configuration data
  for multiple policy channels.  Effectively, it contains multiple
  values for both =MASTERDIR= and =GIT_BRANCH=.
  - Example value assignment:
#+BEGIN_EXAMPLE
  chan_deploy="/var/cfengine/policy_channels"
  # chan_deploy is not otherwise used, but can be used to reduce the
  # verbosity of the chan_config value assignments.

  # channel_config is first set as an empty array, then appended to.
  # The format is, after the initial empty array value is set:
  # channel_config+=( "/absolute/path/to/deploy/to"  "git_reference_specifier" )
  channel_config=()
  channel_config+=( "$chan_deploy/channel_1"    "my_branch_name" )
  channel_config+=( "$chan_deploy/channel_2"    "my_tag_name" )
  channel_config+=( "/var/cfengine/masterfiles" "362e11b705" )
  # Note that channel_config must have an even number of elements
  # and that absolute pathnames must be used.
#+END_EXAMPLE

- =SVN_URL= :: The URL to the svn repository

- =SVN_BRANCH= :: The svn branch to checkout

- =ROOT= :: Location where policy is staged.
  - =/opt/cfengine/masterfiles_staging=

The following attributes are used by CFEngine Enterprise and
their usage for other means should be avoided to avoid collisions.

- =PKEY= :: Private SSH Key used for authorization.

- =GIT_USERNAME= :: Git username used for authorization.

- =GIT_PASSWORD= :: Git password used for authorization.

- =SCRIPT_DIR= :: Directory contianing supporting scripts.

- =GIT_SSH= :: Helper script to access SSH Git repositories (uses =PKEY=).

- =GIT_ASKPASS= :: Helper script to provide HTTPS authorization details to Git
  (uses =GIT_USERNAME= and =GIT_PASSWORD=).

*** Special Note
:PROPERTIES:
:ID:       a1306b8d-35b3-4fc3-9376-9f4f07f2fed7
:END:
The executing user may require additional configuration in order to
successfully authenticate. The specifics depend on the specifics of
your upstream repository. For example, an upstream repository over
http or https that allows anonymous access may need no additional
configuration, but an upstream that uses ssh keys for authentication
may require trust establishment (accepting the host key fingerprint),
and the presence of an ssh key for authentication. Depending on the
security requirements of your organization, you may use a
passphraseless key, or you may use something like =ssh-agent=.


* Example Usage
:PROPERTIES:
:ID:       67b5ead8-5bdf-47d9-a26a-70ad95b742d5
:END:

The script can be invoked manually:

#+BEGIN_EXAMPLE
  /var/cfengine/bin/masterfiles-stage.sh -d /tmp/deployed_masterfiles -p /var/cfengine/masterfiles-stage_parmas/PARAMS_example_git_branch.sh
  tail -n1 /var/cfengine/outputs/dc-scripts.log
  Successfully deployed 'master' from 'https://gitlab.com/nickanderson/masterfiles_demo_3.7.git' to '/var/cfengine/masterfiles' on Sun Dec  6 23:00:34 UTC 2015
#+END_EXAMPLE

Or execution can be automated with CFEngine.

#+BEGIN_SRC cfengine3
  bundle agent stage_masterfiles
  {
    vars:
        policy_server::
        "deploy_script"
          string => "/var/cfengine/bin/masterfiles-stage.sh";

        "masterfiles_deploy_destination"
          string => "/var/cfengine/masterfiles";

    commands:
        policy_server::
        # masterfiles-stage.sh DESTINATION PARAMS
        "$(deploy_script)"
          args => "-d '$(masterfiles_deploy_destination)' -p '/var/cfengine/deploy_params/PARAMS_masterfiles.sh'",
          comment => "Masterfiles should be deployed to $(masterfiles_deploy_destination) using ";
  }
#+END_SRC

If the params file is placed in the default location
=/opt/cfengine/dc-scripts/params.sh=, and if the value of =MASTERDIR=
is specified in the params file, the CFEngine code can be as simple as:

#+BEGIN_SRC cfengine3
  bundle agent stage_masterfiles
  {
    commands:
      policy_server::
        "/var/cfengine/bin/masterfiles-stage.sh";
  }
#+END_SRC


* Phased Rollout with Multiple Staged Masterfiles
:PROPERTIES:
:ID:       bbaa7eed-e400-4f71-a7c5-283ed5e2deca
:END:

The =masterfiles-stage.sh= script can support an implementation for
phased rollout. Phased Rollout is the process of releasing a *policy*
change to a population in a controlled manner.
(=GIT_POLICY_CHANNELS= is one such implementation.)

Read [[file:phased_rollout/README.org][this document]] for further information on using the
=masterfiles-stage.sh= to help accomplish a phased roll out.
