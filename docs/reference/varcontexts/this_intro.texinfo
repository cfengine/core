
This context @samp{this} is used to access information about promises
during their execution. It is context dependent and not universally
meaningful or available, but provides a context for variables where one is
needed (such as when passing the value of a list variable into a parameterized
@code{edit_line} promise from a @code{file} promise).  For example:

@verbatim
bundle agent resolver(s,n)
{ 
files:
  "$(sys.resolv)" 

      create        => "true",
      edit_line     => doresolv("@(this.s)","@(this.n)"),
      edit_defaults => reconstruct;
}
@end verbatim

Note that every unqualified variable is automatically considered to be in
context @samp{this}, so that a reference to the variable @code{$(foo)} is
identical to referencing @code{$(this.foo)}.  You are strongly encourged to
@b{not} take advantage of this behaviour, but simply to be aware that if you
attempt to declare a variable name with one of the following special
reserved names, CFEngine will issue a warning (and you can reference your
variable by qualifying it with the bundle name in which it is declared).

@menu
* Variable this.bundle::
* Variable this.handle::
* Variable this.namespace::
* Variable this.promise_filename::
* Variable this.promise_linenumber::
* Variable this.promiser::
* Variable service_policy::
* Variable this.this::
@end menu

@node Variable this.bundle
@subsection Variable this.bundle

This variable contains the current bundle name.

@node Variable this.handle
@subsection Variable this.handle

This variable points to the promise handle of the currently handled promise;
 it is useful for referring to the intention in log messages.

@node Variable this.namespace
@subsection Variable this.namespace

This variable contains the current namespace.

@node Variable this.promise_filename
@subsection Variable this.promise_filename

This variable reveals the name of the file in which the current promise is defined.

@node Variable this.promise_linenumber
@subsection Variable this.promise_linenumber

This variable reveals the line number in the file at which it is used.  It is
useful to differentiate otherwise identical reports promises.

@node Variable this.promiser
@subsection Variable this.promiser

The special variable @code{$(this.promiser)} is used to refer to the current
value of the promiser itself, in a number of allowed cases, typically when
searches can take place. Current promise types that define @code{$(this.promiser)}
are: @code{files}, @code{processes}, @code{commands}.

This variable is useful in @code{files} promises, for instance when using
pattern matching or @code{depth_search} that implicitly match multiple
objects.  In that case, @code{$(this.promiser)} refers to the
currently identified file that makes the promise.  For example:

@verbatim
bundle agent find666
{
files:
  "/home"
    file_select => world_writeable,
    transformer => "/bin/echo DETECTED $(this.promiser)",
    depth_search => recurse("inf");

  "/etc/.*"
    file_select => world_writeable,
    transformer => "/bin/echo DETECTED $(this.promiser)";
}

body file_select world_writeable
{
  search_mode => { "o+w" };
  file_result => "mode";
}
@end verbatim

@node Variable service_policy
@subsection Variable service_policy

This variable is set to the values of the promise attribute @code{service_policy}, e.g.

@verbatim
services:

  "www"  service_policy => "start";
@end verbatim
@noindent and is typically used in the adaptations for custom services bundles
in the service methods, @xref{service_method in services}.

@node Variable this.this
@subsection Variable this.this

From version core 3.3.0 this variables is reserved. It is used by
functions like @code{maplist()} to represent the current object in 
a transformation map.
