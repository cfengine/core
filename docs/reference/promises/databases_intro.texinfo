
CFEngine Nova can interact with commonly used database servers to keep
promises about the structure and content of data within them.


There are two main cases of database management to address: small
embedded databases and large centralized databases. 

CFEngine is a tool whose strength lies distributed management of
computers.  Databases are often centralized entities that have
single point of management, so a large monolithic database
is more easily managed with other tools. However, CFEngine can still
monitor changes and discrepancies, and it can manage smaller embedded
databases that are distributed in nature, whether they are SQL,
registry or future types.

So creating 100 new databases for test purposes is a task for
CFEngine, but adding a new item to an important production database is
not a task that we recommend using CFEngine for.  

There are three kinds of database supported by Nova:

@table @emph

@item LDAP - The Lightweight Directory Access Protocol
A hierarchical network database primarily for reading simple schema.

@item SQL - Structured Query Language
A number of relational databases (currently supported: MySQL, Postgres)
for reading and writing complex data.

@item Registry - Microsoft Registry
An embedded database for interfacing with system values in Microsoft Windows (Only CFEngine Nova)

@end table
In addition, CFEngine uses a  variety of embedded databases
for its own internals.


CFEngine's ability to make promises about databases depends on the
good grace of the database server. Embedded databases are directly
part of the system and promises can be made directly. However,
databases running through a server process (either on the same host or
on a different host) are independent agents and CFEngine cannot make
promises on their behalf, unless they promise (grant) permission for
CFEngine to make the changes. Thus the pre-requisite for making
SQL database promises is to grant a point of access on the server.


@cartouche
@smallexample 

 databases:

  "@var{database}/@var{subkey or table}"

    database_operation => "@var{create/delete/drop}",
    database_type => "@var{sql/ms_registry}",
    database_columns => @{ 
                        "@var{name},@var{type},@var{size}",
                        "@var{name},@var{type}",
                        @},

    database_server => @var{body};


 body database_server @var{name}
  @{
  db_server_owner => "@var{account name}";
  db_server_password => "@var{password}";
  db_server_host => "@var{hostname or omit for localhost}";
  db_server_type => "@var{mysql/posgres}";
  db_server_connection_db => "@var{database we can connect to}";
  @}

@end smallexample
@end cartouche
