#######################################################
#
# Test readstringarray(), introduce a duplicate key
#
# The 4xx tests are all related, and 400-419 are the readstringarray tests,
# 420-439 the same for readstringarrayidx, 440-459 parsestringarray, and
# 460-479 parsestringarrayidx
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };   
      version => "1.0";
}

bundle agent init
{
  files:
      "$(G.testfile)"
      delete => init_delete;
      
      "$(G.testfile)"
      create => "true",
      edit_line => init_fill_in;
}

bundle edit_line init_fill_in
{
  insert_lines:

      "0:1:2
this:is:a:test
this:too
1:2:3";

}

body delete init_delete
{
      dirlinks => "delete";
      rmdirs   => "true";
}

#######################################################

bundle agent test
{
  vars:
      "cnt" int => readstringarray("ary", "$(G.testfile)","NoComment",":",10,1000);
      "num" int => "3"; 	# 4 lines, but 3 unique keys
}

#######################################################

bundle agent check
{
  vars:
      "idx" slist => getindices("test.ary");

  classes:
      "good" and => {   
		      strcmp("$(test.num)", "$(test.cnt)"),

		      strcmp("$(test.ary[0][0])", "0"),
		      strcmp("$(test.ary[0][1])", "1"),
		      strcmp("$(test.ary[0][2])", "2"),

		      # The second value should overwrite the first
		      strcmp("$(test.ary[this][0])", "this"),
		      strcmp("$(test.ary[this][1])", "too"),

		      strcmp("$(test.ary[1][0])", "1"),
		      strcmp("$(test.ary[1][1])", "2"),
		      strcmp("$(test.ary[1][2])", "3"),
      };

      # Make sure there are no trailing elements
      "bad" or => {
		    isvariable("test.ary[0][3]"),
		    isvariable("test.ary[this][2]"),
		    isvariable("test.ary[1][3]"),
      };

      "ok" expression => "good&!bad";

  reports:
    DEBUG::
      "expected $(test.num) entries, saw $(test.cnt)";

      "saw array indices '$(idx)'";

      "expected test.ary[0][0] = '0', saw '$(test.ary[0][0])'";
      "expected test.ary[0][1] = '1', saw '$(test.ary[0][1])'";
      "expected test.ary[0][2] = '2', saw '$(test.ary[0][2])'";

      "expected test.ary[this][0] = 'this', saw '$(test.ary[this][0])'";
      "expected test.ary[this][1] = 'too', saw '$(test.ary[this][1])'";

      "expected test.ary[1][0] = '1', saw '$(test.ary[1][0])'";
      "expected test.ary[1][1] = '2', saw '$(test.ary[1][1])'";
      "expected test.ary[1][2] = '3', saw '$(test.ary[1][2])'";

    ok::
      "$(this.promise_filename) Pass";

    !ok::
      "$(this.promise_filename) FAIL";
}
