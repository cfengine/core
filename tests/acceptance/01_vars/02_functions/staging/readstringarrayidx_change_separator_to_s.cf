#######################################################
#
# Test readstringarrayidx(), change separator to 's'
#
# The 4xx tests are all related, and 400-419 are the readstringarray tests,
# 420-439 the same for readstringarrayidx, 440-459 parsestringarray, and
# 460-479 parsestringarrayidx
#
#######################################################

body common control
{
      inputs => { "../../default.cf.sub" };
      bundlesequence  => { default("$(this.promise_filename)") };   
      version => "1.0";
}

bundle agent init
{
  files:
      "$(G.testfile)"
      delete => init_delete;
      
      "$(G.testfile)"
      create => "true",
      edit_line => init_fill_in;
}

bundle edit_line init_fill_in
{
  insert_lines:

      "0:1:2
1:2:3
here is:a line: with spaces : in it
blank:fields:::in here::
:leading blank field
this:is:a:test
# A duplicate follows: this line is not always a comment
this:also
last:one";

}

body delete init_delete
{
      dirlinks => "delete";
      rmdirs   => "true";
}

#######################################################

bundle agent test
{
  vars:
      "cnt" int => readstringarrayidx("ary", "$(G.testfile)","^#.*","s+",10,1000);
      "num" int => "8";
}

#######################################################

bundle agent check
{
  vars:
      "idx" slist => getindices("test.ary");

  classes:
      "ok" and => {   
		    strcmp("$(test.num)", "$(test.cnt)"),

		    strcmp("$(test.ary[0][0])", "0:1:2"),

		    strcmp("$(test.ary[1][0])", "1:2:3"),

		    strcmp("$(test.ary[2][0])", "here i"),
		    strcmp("$(test.ary[2][1])", ":a line: with "),
		    strcmp("$(test.ary[2][2])", "pace"),
		    strcmp("$(test.ary[2][3])", " : in it"),

		    strcmp("$(test.ary[3][0])", "blank:field"),
		    strcmp("$(test.ary[3][1])", ":::in here::"),

		    strcmp("$(test.ary[4][0])", ":leading blank field"),

		    strcmp("$(test.ary[5][0])", "thi"),
		    strcmp("$(test.ary[5][1])", ":i"),
		    strcmp("$(test.ary[5][2])", ":a:te"),
		    strcmp("$(test.ary[5][3])", "t"),

		    strcmp("$(test.ary[6][0])", "thi"),
		    strcmp("$(test.ary[6][1])", ":al"),
		    strcmp("$(test.ary[6][2])", "o"),

		    strcmp("$(test.ary[7][0])", "la"),
		    strcmp("$(test.ary[7][1])", "t:one"),
      };

  reports:
    DEBUG::
      "expected $(test.num) entries, saw $(test.cnt)";

      "saw array indices '$(idx)'";

      "expected test.ary[0][0] = '0:1:2', saw '$(test.ary[0][0])'";

      "expected test.ary[1][0] = '1:2:3', saw '$(test.ary[1][0])'";

      "expected test.ary[2][0] = 'here i', saw '$(test.ary[2][0])'";
      "expected test.ary[2][1] = ':a line: with ', saw '$(test.ary[2][1])'";
      "expected test.ary[2][2] = 'pace', saw '$(test.ary[2][2])'";
      "expected test.ary[2][3] = ' : in it', saw '$(test.ary[2][3])'";

      "expected test.ary[3][0] = 'blank:field', saw '$(test.ary[3][0])'";
      "expected test.ary[3][1] = ':::in here::', saw '$(test.ary[3][1])'";

      "expected test.ary[4][0] = ':leading blank field', saw '$(test.ary[4][0])'";

      "expected test.ary[5][0] = 'thi', saw '$(test.ary[5][0])'";
      "expected test.ary[5][1] = ':i', saw '$(test.ary[5][1])'";
      "expected test.ary[5][2] = ':a:te', saw '$(test.ary[5][2])'";
      "expected test.ary[5][3] = 't', saw '$(test.ary[5][3])'";

      "expected test.ary[6][0] = 'thi', saw '$(test.ary[6][0])'";
      "expected test.ary[6][1] = ':al', saw '$(test.ary[6][1])'";
      "expected test.ary[6][2] = 'o', saw '$(test.ary[6][2])'";

      "expected test.ary[7][0] = 'la', saw '$(test.ary[7][0])'";
      "expected test.ary[7][1] = 't:one', saw '$(test.ary[7][1])'";

    ok::
      "$(this.promise_filename) Pass";

    !ok::
      "$(this.promise_filename) FAIL";
}
