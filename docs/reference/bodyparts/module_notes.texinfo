
If true, the module protocol is supported for this script, i.e. it is
treated as a user module. A plug-in module may be written in any
language, it can return any output you like, but lines which begin
with a @samp{+} sign are treated as classes to be defined (like
@option{-D}), while lines which begin with a @samp{-} sign are treated
as classes to be undefined (like @option{-N}).  Lines starting with
@samp{=} are scalar variables to be defined, and lines beginning with
@samp{@@} are lists.  Any other lines of output are cited by
@code{cf-agent} as being erroneous, so you should normally make your
module completely silent. Here is an example written in shell:

@smallexample
#!/bin/sh
/bin/echo "@@mylist= @{ \"one\", \"two\", \"three\" @}"
/bin/echo "=myscalar= scalar val"
/bin/echo "+module_class"
@end smallexample
And here is an example using it:
@verbatim
body common control
   {
   any::

      bundlesequence  => { 
                         def,
                         modtest
                         };
   }

###################################################################

bundle agent def

{
commands:

  "$(sys.workdir)/modules/module_name" module => "true";

reports:

  #
  # Each module forms a private context with its name as id
  #

 module_class::

  "Module set variable $(module_name.myscalar)";

}

###################################################################

bundle agent modtest

{
vars:

 "mylist" slist => { @(module_name.mylist) };

reports:

 module_class::

  "Module set variable $(mylist)";

}

@end verbatim
Here is an example module written in perl.

@smallexample
#!/usr/bin/perl
#
# module:myplugin
#

  # lots of computation....

if (@var{special-condition})
   @{
   print "+specialclass";
   @}

@end smallexample

If your module is ``simple'' and is best expressed as a shell command, then
we suggest that you @i{expose} the class being defined in the command being
executed (making it easier to see what classes are used when reading the
promises file).  For example, the promises could read as follows (the two
@code{echo} commands are to ensure that the shell always exits with a
successful execution of a command):

@verbatim
bundle agent sendmail
{
commands:
    # This next module checks a specific failure mode of dcc, namely
    # more than 3 error states since the last time we ran cf-agent
    is_mailhost::
        "/bin/test `/usr/bin/tail -100 /var/log/maillog | /usr/bin/grep 'Milter (dcc): to error state' | /usr/bin/wc -l` -gt 3 && echo '+start_dccm' || echo
''"
            contain => shell_command,
            module => "true";

    start_dccm::
        "/var/dcc/libexec/start-dccm"
            contain => not_paranoid;
}

body contain shell_command
{
    useshell    => "yes";
}

body contain not_paranoid
{
    useshell    => "no";
    exec_owner  => "root";
    umask       => "22";
}

@end verbatim

Modules inherit the environment variables from cfagent and accept arguments, just
as a regular command does.

@smallexample
#!/bin/sh
#
# module:myplugin
#

/bin/echo $*

@end smallexample

Modules define variables in @code{cf-agent} by outputting strings of the form

@smallexample

=@var{variablename}=@var{value}

@end smallexample

These variables end up in a context which has the same name as the module.
When the @code{$(allclasses)} variable becomes too large to manipulate conveniently,
you can access the complete list of currently defined classes in the file
@file{/var/cfengine/state/allclasses}.
